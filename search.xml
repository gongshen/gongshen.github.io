<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>流水线操作</title>
      <link href="/2018/08/23/%E6%B5%81%E6%B0%B4%E7%BA%BF%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/08/23/%E6%B5%81%E6%B0%B4%E7%BA%BF%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<p>Go的流水线操作<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用于显示的释放上游通道</span></span><br><span class="line"><span class="keyword">var</span> done = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">gen</span><span class="params">(nums ...<span class="keyword">int</span>)</span> &lt;-<span class="title">chan</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="comment">//设置上游通道的缓存，保证下游通到失败时，上游通道也能返回</span></span><br><span class="line">out := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="built_in">len</span>(nums))</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, n := <span class="keyword">range</span> nums &#123;</span><br><span class="line">out &lt;- n</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">close</span>(out)</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> out</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sq</span><span class="params">(in &lt;-<span class="keyword">chan</span> <span class="keyword">int</span>)</span> &lt;-<span class="title">chan</span> <span class="title">int</span></span> &#123;</span><br><span class="line">out := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="built_in">close</span>(out)</span><br><span class="line"><span class="keyword">for</span> n := <span class="keyword">range</span> in &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> out &lt;- n * n:</span><br><span class="line"><span class="keyword">case</span> &lt;-done:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> out</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">merge</span><span class="params">(in ...&lt;-<span class="keyword">chan</span> <span class="keyword">int</span>)</span> &lt;-<span class="title">chan</span> <span class="title">int</span></span> &#123;</span><br><span class="line">wg := sync.WaitGroup&#123;&#125;</span><br><span class="line">wg.Add(<span class="built_in">len</span>(in))</span><br><span class="line"><span class="comment">// 存储未读的数据</span></span><br><span class="line">out := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">3</span>)</span><br><span class="line">output := <span class="function"><span class="keyword">func</span><span class="params">(c &lt;-<span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> n := <span class="keyword">range</span> c &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> out &lt;- n:</span><br><span class="line"><span class="keyword">case</span> &lt;-done:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, c := <span class="keyword">range</span> in &#123;</span><br><span class="line"><span class="comment">// 每个channel分配一个gorouting</span></span><br><span class="line"><span class="keyword">go</span> output(c)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">wg.Wait()</span><br><span class="line"><span class="built_in">close</span>(out)</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> out</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">in := gen(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">c1 := sq(in)</span><br><span class="line">c2 := sq(in)</span><br><span class="line">c3 := sq(in)</span><br><span class="line"><span class="comment">//当main的操作完成时，关闭通道</span></span><br><span class="line"><span class="keyword">defer</span> <span class="built_in">close</span>(done)</span><br><span class="line">out := merge(c1, c2, c3)</span><br><span class="line">fmt.Println(&lt;-out)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> golang </category>
          
          <category> channel </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>并发安全的字典</title>
      <link href="/2018/08/22/%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8%E7%9A%84%E5%AD%97%E5%85%B8/"/>
      <url>/2018/08/22/%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8%E7%9A%84%E5%AD%97%E5%85%B8/</url>
      <content type="html"><![CDATA[<h1 id="1、Develop-Code"><a href="#1、Develop-Code" class="headerlink" title="1、Develop Code"></a>1、Develop Code</h1><h3 id="pair-go"><a href="#pair-go" class="headerlink" title="pair.go"></a>pair.go</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> linkedPair <span class="keyword">interface</span> &#123;</span><br><span class="line">Next() Pair</span><br><span class="line">SetNext(nextPair Pair) error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Pair <span class="keyword">interface</span> &#123;</span><br><span class="line">linkedPair</span><br><span class="line">Key() <span class="keyword">string</span></span><br><span class="line">Element() <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">Hash() <span class="keyword">uint64</span></span><br><span class="line">SetElement(element <span class="keyword">interface</span>&#123;&#125;) error</span><br><span class="line">Copy() Pair</span><br><span class="line">String() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> pair <span class="keyword">struct</span> &#123;</span><br><span class="line">key     <span class="keyword">string</span></span><br><span class="line">element unsafe.Pointer</span><br><span class="line">hash    <span class="keyword">uint64</span></span><br><span class="line">next    unsafe.Pointer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newPair</span><span class="params">(key <span class="keyword">string</span>, element <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(Pair, error)</span></span> &#123;</span><br><span class="line">p := &amp;pair&#123;</span><br><span class="line">key:  key,</span><br><span class="line">hash: hash(key),</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> element == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, newIllegalParameterError(<span class="string">"element is nil"</span>)</span><br><span class="line">&#125;</span><br><span class="line">p.element = unsafe.Pointer(&amp;element)</span><br><span class="line"><span class="keyword">return</span> p, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *pair)</span> <span class="title">Key</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> p.key</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *pair)</span> <span class="title">Hash</span><span class="params">()</span> <span class="title">uint64</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> p.hash</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *pair)</span> <span class="title">Element</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line">element := atomic.LoadPointer(&amp;p.element)</span><br><span class="line"><span class="keyword">if</span> element == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *(*<span class="keyword">interface</span>&#123;&#125;)(element)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *pair)</span> <span class="title">SetElement</span><span class="params">(element <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> element == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> newIllegalParameterError(<span class="string">"element is nil"</span>)</span><br><span class="line">&#125;</span><br><span class="line">atomic.StorePointer(&amp;p.element, unsafe.Pointer(&amp;element))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *pair)</span> <span class="title">Copy</span><span class="params">()</span> <span class="title">Pair</span></span> &#123;</span><br><span class="line">pCopy, _ := newPair(p.Key(), p.Element())</span><br><span class="line"><span class="keyword">return</span> pCopy</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *pair)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> p.genString(<span class="literal">false</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *pair)</span> <span class="title">Next</span><span class="params">()</span> <span class="title">Pair</span></span> &#123;</span><br><span class="line">pointer := atomic.LoadPointer(&amp;p.next)</span><br><span class="line"><span class="keyword">if</span> pointer == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (*pair)(pointer)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *pair)</span> <span class="title">SetNext</span><span class="params">(nextPair Pair)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> nextPair == <span class="literal">nil</span> &#123;</span><br><span class="line">atomic.StorePointer(&amp;p.next, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">pp, ok := nextPair.(*pair)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span> newIllegalPairTypeError(nextPair)</span><br><span class="line">&#125;</span><br><span class="line">atomic.StorePointer(&amp;p.next, unsafe.Pointer(pp))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *pair)</span> <span class="title">genString</span><span class="params">(detail <span class="keyword">bool</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> buf bytes.Buffer</span><br><span class="line">buf.WriteString(<span class="string">"pair&#123;key:"</span>)</span><br><span class="line">buf.WriteString(p.Key())</span><br><span class="line">buf.WriteString(<span class="string">",element:"</span>)</span><br><span class="line">buf.WriteString(fmt.Sprintf(<span class="string">"%+v"</span>, p.Element()))</span><br><span class="line">buf.WriteString(<span class="string">",hash:"</span>)</span><br><span class="line">buf.WriteString(fmt.Sprintf(<span class="string">"%d"</span>, p.Hash()))</span><br><span class="line"><span class="keyword">if</span> detail &#123;</span><br><span class="line">buf.WriteString(<span class="string">",next:"</span>)</span><br><span class="line"><span class="keyword">if</span> v := p.Next(); v != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> vv, ok := v.(*pair); ok &#123;</span><br><span class="line">buf.WriteString(vv.genString(detail))</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">buf.WriteString(<span class="string">"&lt;ignore&gt;"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">buf.WriteString(<span class="string">",nextKey:"</span>)</span><br><span class="line"><span class="keyword">if</span> v := p.Next(); v != <span class="literal">nil</span> &#123;</span><br><span class="line">buf.WriteString(v.Key())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">buf.WriteString(<span class="string">"&#125;"</span>)</span><br><span class="line"><span class="keyword">return</span> buf.String()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="bucket-go"><a href="#bucket-go" class="headerlink" title="bucket.go"></a>bucket.go</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Bucket <span class="keyword">interface</span> &#123;</span><br><span class="line">Put(p Pair, lock sync.Locker) (<span class="keyword">bool</span>, error)</span><br><span class="line">Get(key <span class="keyword">string</span>) Pair</span><br><span class="line">GetFirstPair() Pair</span><br><span class="line">Delete(key <span class="keyword">string</span>, lock sync.Locker) <span class="keyword">bool</span></span><br><span class="line">Clear(lock sync.Locker)</span><br><span class="line">Size() <span class="keyword">uint64</span></span><br><span class="line">String() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> bucket <span class="keyword">struct</span> &#123;</span><br><span class="line">size       <span class="keyword">uint64</span></span><br><span class="line">firstValue atomic.Value <span class="comment">//初始化时不能为nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> placeholder Pair = &amp;pair&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newBucket</span><span class="params">()</span> <span class="title">Bucket</span></span> &#123;</span><br><span class="line">b := &amp;bucket&#123;&#125;</span><br><span class="line">b.firstValue.Store(placeholder)</span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *bucket)</span> <span class="title">Put</span><span class="params">(p Pair, lock sync.Locker)</span> <span class="params">(<span class="keyword">bool</span>, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> p == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, newIllegalParameterError(<span class="string">"pair is nil"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> lock != <span class="literal">nil</span> &#123;</span><br><span class="line">lock.Lock()</span><br><span class="line"><span class="keyword">defer</span> lock.Unlock()</span><br><span class="line">&#125;</span><br><span class="line">firstPair := b.GetFirstPair()</span><br><span class="line"><span class="keyword">if</span> firstPair == <span class="literal">nil</span> &#123;</span><br><span class="line">b.firstValue.Store(p)</span><br><span class="line">atomic.AddUint64(&amp;b.size, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> target Pair</span><br><span class="line">key := p.Key()</span><br><span class="line"><span class="keyword">for</span> v := firstPair; v != <span class="literal">nil</span>; v = v.Next() &#123;</span><br><span class="line"><span class="keyword">if</span> v.Key() == key &#123;</span><br><span class="line">target = v</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> target != <span class="literal">nil</span> &#123;</span><br><span class="line">target.SetElement(p.Element())</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">p.SetNext(firstPair)</span><br><span class="line">b.firstValue.Store(p)</span><br><span class="line">atomic.AddUint64(&amp;b.size, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *bucket)</span> <span class="title">Get</span><span class="params">(key <span class="keyword">string</span>)</span> <span class="title">Pair</span></span> &#123;</span><br><span class="line">firstPair := b.GetFirstPair()</span><br><span class="line"><span class="keyword">if</span> firstPair == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> v := firstPair; v != <span class="literal">nil</span>; v = v.Next() &#123;</span><br><span class="line"><span class="keyword">if</span> v.Key() == key &#123;</span><br><span class="line"><span class="keyword">return</span> v</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *bucket)</span> <span class="title">GetFirstPair</span><span class="params">()</span> <span class="title">Pair</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> v := b.firstValue.Load(); v == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> vv, ok := v.(*pair); !ok || vv == placeholder &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> vv</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *bucket)</span> <span class="title">Delete</span><span class="params">(key <span class="keyword">string</span>, lock sync.Locker)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> lock != <span class="literal">nil</span> &#123;</span><br><span class="line">lock.Lock()</span><br><span class="line"><span class="keyword">defer</span> lock.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> breakpoint Pair</span><br><span class="line"><span class="keyword">var</span> target Pair</span><br><span class="line"><span class="keyword">var</span> pairs []Pair</span><br><span class="line">firstPair := b.GetFirstPair()</span><br><span class="line"><span class="keyword">if</span> firstPair == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> v := firstPair; v != <span class="literal">nil</span>; v = v.Next() &#123;</span><br><span class="line"><span class="keyword">if</span> v.Key() == key &#123;</span><br><span class="line">target = v</span><br><span class="line">breakpoint = v.Next()</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">pairs = <span class="built_in">append</span>(pairs, v)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> target == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">newfirstPair := breakpoint</span><br><span class="line"><span class="keyword">for</span> i := <span class="built_in">len</span>(pairs) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">pairCopy := pairs[i].Copy()</span><br><span class="line">pairCopy.SetNext(newfirstPair)</span><br><span class="line">newfirstPair = pairCopy</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> newfirstPair != <span class="literal">nil</span> &#123;</span><br><span class="line">b.firstValue.Store(newfirstPair)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">b.firstValue.Store(placeholder)</span><br><span class="line">&#125;</span><br><span class="line">atomic.AddUint64(&amp;b.size, ^<span class="keyword">uint64</span>(<span class="number">0</span>))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *bucket)</span> <span class="title">Clear</span><span class="params">(lock sync.Locker)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> lock != <span class="literal">nil</span> &#123;</span><br><span class="line">lock.Lock()</span><br><span class="line"><span class="keyword">defer</span> lock.Unlock()</span><br><span class="line">&#125;</span><br><span class="line">atomic.StoreUint64(&amp;b.size, <span class="number">0</span>)</span><br><span class="line">b.firstValue.Store(placeholder)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *bucket)</span> <span class="title">Size</span><span class="params">()</span> <span class="title">uint64</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> atomic.LoadUint64(&amp;b.size)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *bucket)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> buf bytes.Buffer</span><br><span class="line">buf.WriteString(<span class="string">"["</span>)</span><br><span class="line"><span class="keyword">for</span> v := b.GetFirstPair(); v != <span class="literal">nil</span>; v = v.Next() &#123;</span><br><span class="line">buf.WriteString(v.String())</span><br><span class="line">buf.WriteString(<span class="string">" "</span>)</span><br><span class="line">&#125;</span><br><span class="line">buf.WriteString(<span class="string">"]"</span>)</span><br><span class="line"><span class="keyword">return</span> buf.String()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="segment-go"><a href="#segment-go" class="headerlink" title="segment.go"></a>segment.go</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Segment <span class="keyword">interface</span> &#123;</span><br><span class="line">Put(p Pair) (<span class="keyword">bool</span>, error)</span><br><span class="line">Get(key <span class="keyword">string</span>) Pair</span><br><span class="line">GetWithHash(key <span class="keyword">string</span>, hash <span class="keyword">uint64</span>) Pair</span><br><span class="line">Delete(key <span class="keyword">string</span>) <span class="keyword">bool</span></span><br><span class="line"><span class="comment">//获取段内总键值对数量</span></span><br><span class="line">Size() <span class="keyword">uint64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> segment <span class="keyword">struct</span> &#123;</span><br><span class="line">buckets           []Bucket</span><br><span class="line">bucketsLen        <span class="keyword">int</span></span><br><span class="line">pairTotal         <span class="keyword">uint64</span></span><br><span class="line">pairRedistributor PairRedistributor</span><br><span class="line">lock              sync.Mutex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newSegment</span><span class="params">(bucketNumber <span class="keyword">int</span>, pairRedistribute PairRedistributor)</span> <span class="title">Segment</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> bucketNumber &lt;= <span class="number">0</span> &#123;</span><br><span class="line">bucketNumber = DEFAULT_BUCKET_NUMBER</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> pairRedistribute == <span class="literal">nil</span> &#123;</span><br><span class="line">pairRedistribute = newDefaultPairRedistributor(DEFAULT_BUCKET_LOAD_FACTOR, bucketNumber)</span><br><span class="line">&#125;</span><br><span class="line">buckets := <span class="built_in">make</span>([]Bucket, bucketNumber)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; bucketNumber; i++ &#123;</span><br><span class="line">buckets[i] = newBucket()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;segment&#123;</span><br><span class="line">buckets:           buckets,</span><br><span class="line">bucketsLen:        bucketNumber,</span><br><span class="line">pairRedistributor: pairRedistribute,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(se *segment)</span> <span class="title">Put</span><span class="params">(p Pair)</span> <span class="params">(<span class="keyword">bool</span>, error)</span></span> &#123;</span><br><span class="line">se.lock.Lock()</span><br><span class="line">b := se.buckets[<span class="keyword">int</span>(p.Hash())%se.bucketsLen]</span><br><span class="line">ok, err := b.Put(p, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">newTotal := atomic.AddUint64(&amp;se.pairTotal, <span class="number">1</span>)</span><br><span class="line">se.redistribute(newTotal, b.Size())</span><br><span class="line">&#125;</span><br><span class="line">se.lock.Unlock()</span><br><span class="line"><span class="keyword">return</span> ok, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(se *segment)</span> <span class="title">Get</span><span class="params">(key <span class="keyword">string</span>)</span> <span class="title">Pair</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> se.GetWithHash(key, hash(key))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(se *segment)</span> <span class="title">Delete</span><span class="params">(key <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">se.lock.Lock()</span><br><span class="line">b := se.buckets[<span class="keyword">int</span>(hash(key))%se.bucketsLen]</span><br><span class="line">ok := b.Delete(key, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">newTotal := atomic.AddUint64(&amp;se.pairTotal, ^<span class="keyword">uint64</span>(<span class="number">0</span>))</span><br><span class="line">se.redistribute(newTotal, b.Size())</span><br><span class="line">&#125;</span><br><span class="line">se.lock.Unlock()</span><br><span class="line"><span class="keyword">return</span> ok</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(se *segment)</span> <span class="title">GetWithHash</span><span class="params">(key <span class="keyword">string</span>, keyHash <span class="keyword">uint64</span>)</span> <span class="title">Pair</span></span> &#123;</span><br><span class="line">se.lock.Lock()</span><br><span class="line">b := se.buckets[<span class="keyword">int</span>(hash(key))%se.bucketsLen]</span><br><span class="line">pair := b.Get(key)</span><br><span class="line">se.lock.Unlock()</span><br><span class="line"><span class="keyword">return</span> pair</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(se *segment)</span> <span class="title">Size</span><span class="params">()</span> <span class="title">uint64</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> atomic.LoadUint64(&amp;se.pairTotal)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(se *segment)</span> <span class="title">redistribute</span><span class="params">(pairTotal <span class="keyword">uint64</span>, bucketSize <span class="keyword">uint64</span>)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> p := <span class="built_in">recover</span>(); p != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> np, ok := p.(error); ok &#123;</span><br><span class="line">err = newIllegalRedistributorError(np.Error())</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">err = newIllegalRedistributorError(fmt.Sprintf(<span class="string">"%s"</span>, p))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">se.pairRedistributor.UpdateThreshold(pairTotal, se.bucketsLen)</span><br><span class="line">bucketStatus := se.pairRedistributor.CheckBucketStatus(pairTotal, bucketSize)</span><br><span class="line">newBuckets, changed := se.pairRedistributor.Redistribute(bucketStatus, se.buckets)</span><br><span class="line"><span class="keyword">if</span> changed &#123;</span><br><span class="line">se.buckets = newBuckets</span><br><span class="line">se.bucketsLen = <span class="built_in">len</span>(se.buckets)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="cmap-go"><a href="#cmap-go" class="headerlink" title="cmap.go"></a>cmap.go</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ConcurrentMap <span class="keyword">interface</span> &#123;</span><br><span class="line">Concurrency() <span class="keyword">int</span></span><br><span class="line">Put(key <span class="keyword">string</span>, element <span class="keyword">interface</span>&#123;&#125;) (<span class="keyword">bool</span>, error)</span><br><span class="line">Get(key <span class="keyword">string</span>) <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">Delete(key <span class="keyword">string</span>) <span class="keyword">bool</span></span><br><span class="line">Len() <span class="keyword">uint64</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> concurrentMap <span class="keyword">struct</span> &#123;</span><br><span class="line">concurrency <span class="keyword">int</span></span><br><span class="line">segments    []Segment</span><br><span class="line">total       <span class="keyword">uint64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewConcurrenctMap</span><span class="params">(concurrency <span class="keyword">int</span>, pairRedistributor PairRedistributor)</span> <span class="params">(ConcurrentMap, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> concurrency &lt;= <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, newIllegalParameterError(<span class="string">"并发量太小了！"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> concurrency &gt; MAX_CONCURRENCY &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, newIllegalParameterError(<span class="string">"并发量太大了！"</span>)</span><br><span class="line">&#125;</span><br><span class="line">cmap := &amp;concurrentMap&#123;&#125;</span><br><span class="line">cmap.concurrency = concurrency</span><br><span class="line">cmap.segments = <span class="built_in">make</span>([]Segment, concurrency)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; concurrency; i++ &#123;</span><br><span class="line">cmap.segments[i] = newSegment(DEFAULT_BUCKET_NUMBER, pairRedistributor)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cmap, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cmap *concurrentMap)</span> <span class="title">Concurrency</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> cmap.concurrency</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cmap *concurrentMap)</span> <span class="title">Put</span><span class="params">(key <span class="keyword">string</span>, element <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(<span class="keyword">bool</span>, error)</span></span> &#123;</span><br><span class="line">p, err := newPair(key, element)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">s := cmap.findSegment(p.Hash())</span><br><span class="line">ok, err := s.Put(p)</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">atomic.AddUint64(&amp;cmap.total, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ok, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cmap *concurrentMap)</span> <span class="title">Get</span><span class="params">(key <span class="keyword">string</span>)</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line">keyHash := hash(key)</span><br><span class="line">s := cmap.findSegment(keyHash)</span><br><span class="line">pair := s.GetWithHash(key, keyHash)</span><br><span class="line"><span class="keyword">if</span> pair == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pair.Element()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cmap *concurrentMap)</span> <span class="title">Delete</span><span class="params">(key <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">s := cmap.findSegment(hash(key))</span><br><span class="line"><span class="keyword">if</span> s.Delete(key) &#123;</span><br><span class="line">atomic.AddUint64(&amp;cmap.total, ^<span class="keyword">uint64</span>(<span class="number">0</span>))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cmap *concurrentMap)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">uint64</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> atomic.LoadUint64(&amp;cmap.total)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cmap *concurrentMap)</span> <span class="title">findSegment</span><span class="params">(keyHash <span class="keyword">uint64</span>)</span> <span class="title">Segment</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> cmap.concurrency == <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> cmap.segments[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> keyHash32 <span class="keyword">uint32</span></span><br><span class="line"><span class="keyword">if</span> keyHash &gt; math.MaxUint32 &#123;</span><br><span class="line">keyHash32 = <span class="keyword">uint32</span>(keyHash &gt;&gt; <span class="number">32</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">keyHash32 = <span class="keyword">uint32</span>(keyHash)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cmap.segments[<span class="keyword">int</span>(keyHash32&gt;&gt;<span class="number">16</span>)%(cmap.concurrency<span class="number">-1</span>)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="utils-go"><a href="#utils-go" class="headerlink" title="utils.go"></a>utils.go</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hash</span><span class="params">(str <span class="keyword">string</span>)</span><span class="title">uint64</span></span>&#123;</span><br><span class="line">seed:=<span class="keyword">uint64</span>(<span class="number">13131</span>)</span><br><span class="line"><span class="keyword">var</span> hash <span class="keyword">uint64</span></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="built_in">len</span>(str);i++&#123;</span><br><span class="line">hash=hash*seed+<span class="keyword">uint64</span>(str[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (hash &amp; <span class="number">0x7FFFFFFFFFFFFFFF</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//h:=md5.Sum([]byte(str))</span></span><br><span class="line"><span class="comment">//var num uint64</span></span><br><span class="line"><span class="comment">//binary.Read(bytes.NewReader(h[:]),binary.LittleEndian,&amp;num)</span></span><br><span class="line"><span class="comment">//return num</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="redistribute-go"><a href="#redistribute-go" class="headerlink" title="redistribute.go"></a>redistribute.go</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> BucketStatus <span class="keyword">uint8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">BUCKET_STATUS_NORMAL     BucketStatus = <span class="number">0</span></span><br><span class="line">BUCKET_STATUS_OVERWEIGHT BucketStatus = <span class="number">1</span></span><br><span class="line">BUCKET_STATUS_UDERWEIGHT BucketStatus = <span class="number">2</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> PairRedistributor <span class="keyword">interface</span> &#123;</span><br><span class="line">UpdateThreshold(pairTotal <span class="keyword">uint64</span>, bucketNumber <span class="keyword">int</span>)</span><br><span class="line">CheckBucketStatus(pairTatal <span class="keyword">uint64</span>, bucketSize <span class="keyword">uint64</span>) (bucketStatus BucketStatus)</span><br><span class="line">Redistribute(bucketStatus BucketStatus, buckets []Bucket) (newBuckets []Bucket, changed <span class="keyword">bool</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> pairRedistributor <span class="keyword">struct</span> &#123;</span><br><span class="line">loadFactor           <span class="keyword">float64</span></span><br><span class="line">upperThreshold       <span class="keyword">uint64</span></span><br><span class="line">overwightBucketCount <span class="keyword">uint64</span></span><br><span class="line">emptyBucketCount     <span class="keyword">uint64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newDefaultPairRedistributor</span><span class="params">(loadFactor <span class="keyword">float64</span>, bucketNumber <span class="keyword">int</span>)</span> <span class="title">PairRedistributor</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> loadFactor &lt;= <span class="number">0</span> &#123;</span><br><span class="line">loadFactor = DEFAULT_BUCKET_LOAD_FACTOR</span><br><span class="line">&#125;</span><br><span class="line">pr := &amp;pairRedistributor&#123;&#125;</span><br><span class="line">pr.loadFactor = loadFactor</span><br><span class="line">pr.UpdateThreshold(<span class="number">0</span>, bucketNumber)</span><br><span class="line"><span class="keyword">return</span> pr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bucketCountTemplate = <span class="string">`Bucket count:</span></span><br><span class="line"><span class="string">pairTotal:%d</span></span><br><span class="line"><span class="string">bucketNumber:%d</span></span><br><span class="line"><span class="string">average:%f</span></span><br><span class="line"><span class="string">upperThreshold:%d</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pr *pairRedistributor)</span> <span class="title">UpdateThreshold</span><span class="params">(pairTotal <span class="keyword">uint64</span>, bucketNumber <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> average <span class="keyword">float64</span></span><br><span class="line">average = <span class="keyword">float64</span>(pairTotal / <span class="keyword">uint64</span>(bucketNumber))</span><br><span class="line"><span class="keyword">if</span> average &lt; <span class="number">100</span> &#123;</span><br><span class="line">average = <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Sprintf(bucketCountTemplate,</span><br><span class="line">pairTotal,</span><br><span class="line">bucketNumber,</span><br><span class="line">average,</span><br><span class="line">atomic.LoadUint64(&amp;pr.upperThreshold))</span><br><span class="line">&#125;()</span><br><span class="line">atomic.StoreUint64(&amp;pr.upperThreshold, <span class="keyword">uint64</span>(average*pr.loadFactor))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bucketStatusTemplate = <span class="string">`Bucket status:</span></span><br><span class="line"><span class="string">pairTotal:%d</span></span><br><span class="line"><span class="string">bucketSize:%d</span></span><br><span class="line"><span class="string">upperthreshold:%d</span></span><br><span class="line"><span class="string">overweightBucketCount:%d</span></span><br><span class="line"><span class="string">emptyBucketCount:%d</span></span><br><span class="line"><span class="string">bucketStatus:%d</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pr *pairRedistributor)</span> <span class="title">CheckBucketStatus</span><span class="params">(pairTotal <span class="keyword">uint64</span>, bucketSize <span class="keyword">uint64</span>)</span> <span class="params">(bucketStatus BucketStatus)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Sprintf(bucketStatusTemplate,</span><br><span class="line">pairTotal,</span><br><span class="line">bucketSize,</span><br><span class="line">atomic.LoadUint64(&amp;pr.upperThreshold),</span><br><span class="line">atomic.LoadUint64(&amp;pr.overwightBucketCount),</span><br><span class="line">atomic.LoadUint64(&amp;pr.emptyBucketCount),</span><br><span class="line">bucketStatus)</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">if</span> bucketSize &gt; DEFAULT_BUCKET_MAX_SIZE || bucketSize &gt;= atomic.LoadUint64(&amp;pr.upperThreshold) &#123;</span><br><span class="line">atomic.AddUint64(&amp;pr.overwightBucketCount, <span class="number">1</span>)</span><br><span class="line">bucketStatus = BUCKET_STATUS_OVERWEIGHT</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> bucketSize == <span class="number">0</span> &#123;</span><br><span class="line">atomic.AddUint64(&amp;pr.emptyBucketCount, <span class="number">1</span>)</span><br><span class="line">bucketStatus = BUCKET_STATUS_UDERWEIGHT</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> redistributionTemplate = <span class="string">`Redistribution:</span></span><br><span class="line"><span class="string">bucketStatus:%d</span></span><br><span class="line"><span class="string">currentNumber:%d</span></span><br><span class="line"><span class="string">newNumber:%d</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pr *pairRedistributor)</span> <span class="title">Redistribute</span><span class="params">(bucketStatus BucketStatus, buckets []Bucket)</span> <span class="params">(newBuckets []Bucket, changed <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">currentNumber := <span class="keyword">uint64</span>(<span class="built_in">len</span>(buckets))</span><br><span class="line">newNumber := currentNumber</span><br><span class="line"><span class="keyword">switch</span> bucketStatus &#123;</span><br><span class="line"><span class="keyword">case</span> BUCKET_STATUS_OVERWEIGHT:</span><br><span class="line"><span class="keyword">if</span> atomic.LoadUint64(&amp;pr.overwightBucketCount)*<span class="number">4</span> &lt; currentNumber &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">newNumber = currentNumber &lt;&lt; <span class="number">1</span></span><br><span class="line"><span class="keyword">case</span> BUCKET_STATUS_UDERWEIGHT:</span><br><span class="line"><span class="keyword">if</span> atomic.LoadUint64(&amp;pr.emptyBucketCount)*<span class="number">4</span> &lt; currentNumber || currentNumber &lt; <span class="number">100</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">newNumber = currentNumber &gt;&gt; <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> newNumber &lt; <span class="number">2</span> &#123;</span><br><span class="line">newNumber = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> currentNumber == newNumber &#123;</span><br><span class="line">atomic.StoreUint64(&amp;pr.emptyBucketCount, <span class="number">0</span>)</span><br><span class="line">atomic.StoreUint64(&amp;pr.overwightBucketCount, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> pairs []Pair</span><br><span class="line"><span class="keyword">for</span> _, b := <span class="keyword">range</span> buckets &#123;</span><br><span class="line"><span class="keyword">for</span> p := b.GetFirstPair(); p != <span class="literal">nil</span>; p = p.Next() &#123;</span><br><span class="line">pairs = <span class="built_in">append</span>(pairs, p)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> newNumber &gt; currentNumber &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">uint64</span>(<span class="number">0</span>); i &lt; currentNumber; i++ &#123;</span><br><span class="line">buckets[i].Clear(<span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> j := newNumber - currentNumber; j &gt; <span class="number">0</span>; j-- &#123;</span><br><span class="line">buckets = <span class="built_in">append</span>(buckets, newBucket())</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">buckets := <span class="built_in">make</span>([]Bucket, newNumber)</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">uint64</span>(<span class="number">0</span>); i &lt; newNumber; i++ &#123;</span><br><span class="line">buckets[i] = newBucket()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> pairs &#123;</span><br><span class="line">index := <span class="keyword">int</span>(p.Hash() % newNumber)</span><br><span class="line">b := buckets[index]</span><br><span class="line">b.Put(p, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line">atomic.StoreUint64(&amp;pr.overwightBucketCount, <span class="number">0</span>)</span><br><span class="line">atomic.StoreUint64(&amp;pr.emptyBucketCount, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> buckets, <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="base-go"><a href="#base-go" class="headerlink" title="base.go"></a>base.go</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">DEFAULT_BUCKET_LOAD_FACTOR <span class="keyword">float64</span> = <span class="number">0.75</span></span><br><span class="line">DEFAULT_BUCKET_NUMBER <span class="keyword">int</span> = <span class="number">16</span></span><br><span class="line">DEFAULT_BUCKET_MAX_SIZE <span class="keyword">uint64</span> = <span class="number">1000</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MAX_CONCURRENCY <span class="keyword">int</span> = <span class="number">65536</span></span><br></pre></td></tr></table></figure><h1 id="2、Test-Code"><a href="#2、Test-Code" class="headerlink" title="2、Test Code"></a>2、Test Code</h1><h3 id="pair-test-go"><a href="#pair-test-go" class="headerlink" title="pair_test.go"></a>pair_test.go</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> keyElement <span class="keyword">struct</span> &#123;</span><br><span class="line">key     <span class="keyword">string</span></span><br><span class="line">element <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestNewPair</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">testCases := genKeyElementSlice(<span class="number">100</span>)</span><br><span class="line"><span class="keyword">for</span> _, testCase := <span class="keyword">range</span> testCases &#123;</span><br><span class="line">t.Run(fmt.Sprintf(<span class="string">"key=%s,element=%#v"</span>, testCase.key, testCase.element), <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">pair, err := newPair(testCase.key, testCase.element)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"An error occurs when new a pair:%s (key:%s,element:%#v)"</span>, err, testCase.key, testCase.element)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> pair == <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Could new a pair!(key:%s,element:%#v)"</span>, testCase.key, testCase.element)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestPair_Hash_Element_Key</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">testCases := genKeyElementSlice(<span class="number">30</span>)</span><br><span class="line"><span class="keyword">for</span> _, testCase := <span class="keyword">range</span> testCases &#123;</span><br><span class="line">t.Run(fmt.Sprintf(<span class="string">"key:%s,element:%#v"</span>, testCase.key, testCase.element), <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">pair, err := newPair(testCase.key, testCase.element)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"An error occurs when new a pair:%s (key:%s,element:%#v)"</span>, err, testCase.key, testCase.element)</span><br><span class="line">&#125;</span><br><span class="line">exceptedHash := hash(testCase.key)</span><br><span class="line"><span class="keyword">if</span> pair.Hash() != exceptedHash &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent hash:except:%d,actual:%d"</span>, hash(testCase.key), exceptedHash)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> pair.Key() != testCase.key &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent key:except:%s,actual:%#v"</span>, testCase.key, pair.Key())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> pair.Element() != testCase.element &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent hash:except:%v,actual:%#v"</span>, testCase.element, pair.Element())</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestPair_SetElement</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">testCases := genKeyElementSlice(<span class="number">30</span>)</span><br><span class="line"><span class="keyword">for</span> _, testCase := <span class="keyword">range</span> testCases &#123;</span><br><span class="line">t.Run(fmt.Sprintf(<span class="string">"key:%s,element:%#v"</span>, testCase.key, testCase.element), <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">pair, err := newPair(testCase.key, testCase.element)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"An error occurs when new a pair:%s (key:%s,element:%#v)"</span>, err, testCase.key, testCase.element)</span><br><span class="line">&#125;</span><br><span class="line">element := randString()</span><br><span class="line">err = pair.SetElement(element)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"An error when set element:%s"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> pair.Element() != element &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent set element: except:%#v,actual:%#v)"</span>, element, pair.Element())</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestPair_Copy</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">testCases := genKeyElementSlice(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> _, testCase := <span class="keyword">range</span> testCases &#123;</span><br><span class="line">t.Run(fmt.Sprintf(<span class="string">"key:%s,element:%#v"</span>, testCase.key, testCase.element), <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">pair, err := newPair(testCase.key, testCase.element)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"An error occurs when new a pair:%s (key:%s,element:%#v)"</span>, err, testCase.key, testCase.element)</span><br><span class="line">&#125;</span><br><span class="line">pCopy := pair.Copy()</span><br><span class="line"><span class="keyword">if</span> pair.Hash() != pCopy.Hash() &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent hash:except:%d,actual:%d"</span>, pair.Hash(), pCopy.Hash())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> pair.Key() != pCopy.Key() &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent key:except:%s,actual:%s"</span>, pair.Key(), pCopy.Key())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> pCopy.Element() != pair.Element() &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent element:except:%#v,actual:%#v"</span>, pair.Element(), pCopy.Element())</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestPair_Next</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">number := <span class="number">10</span></span><br><span class="line">testCases := genKeyElementSlice(number)</span><br><span class="line"><span class="keyword">var</span> current Pair</span><br><span class="line"><span class="keyword">var</span> prev Pair</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line"><span class="keyword">for</span> _, testCase := <span class="keyword">range</span> testCases &#123;</span><br><span class="line">current, err = newPair(testCase.key, testCase.element)</span><br><span class="line">t.Log(current.String())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"An error occurs when new a pair:%s (key:%s,element:%#v)"</span>, err, testCase.key, testCase.element)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> prev != <span class="literal">nil</span> &#123;</span><br><span class="line">current.SetNext(prev)</span><br><span class="line">&#125;</span><br><span class="line">prev = current</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := number - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">next := current.Next()</span><br><span class="line"><span class="keyword">if</span> i == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">if</span> next != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Next is not nil!(pair:%#v,index:%d)"</span>, current, i)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> next == <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Next is nil!(pair:%#v,index:%d)"</span>, current, i)</span><br><span class="line">&#125;</span><br><span class="line">expectNext := testCases[i<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">if</span> expectNext.key != next.Key() &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent key:except:%v,actual:%#v"</span>, expectNext.key, next.Key())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> expectNext.element != next.Element() &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent element:except:%v,actual:%#v"</span>, expectNext.element, next.Element())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">current = next</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">genKeyElementSlice</span><span class="params">(number <span class="keyword">int</span>)</span> []*<span class="title">keyElement</span></span> &#123;</span><br><span class="line">testCases := <span class="built_in">make</span>([]*keyElement, number)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; number; i++ &#123;</span><br><span class="line">testCases[i] = &amp;keyElement&#123;randString(), randElement()&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> testCases</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">randElement</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line"><span class="keyword">if</span> i := rand.Int31(); i%<span class="number">3</span> != <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br><span class="line">buf := <span class="built_in">new</span>(bytes.Buffer)</span><br><span class="line">binary.Write(buf, binary.LittleEndian, rand.Int31())</span><br><span class="line"><span class="keyword">return</span> hex.EncodeToString(buf.Bytes())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">randString</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">buf := <span class="built_in">new</span>(bytes.Buffer)</span><br><span class="line">binary.Write(buf, binary.LittleEndian, rand.Int31())</span><br><span class="line"><span class="keyword">return</span> hex.EncodeToString(buf.Bytes())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="bucket-test-go"><a href="#bucket-test-go" class="headerlink" title="bucket_test.go"></a>bucket_test.go</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestNewBucket</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">b := newBucket()</span><br><span class="line"><span class="keyword">if</span> b == <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"New bucket is fail"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. Put和Get是否是同一个Pair</span></span><br><span class="line"><span class="comment">//2. 重复Put同一个Pair是否有问题</span></span><br><span class="line"><span class="comment">//3. bucket的Size是否和放置的Pair数量一致</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestBucket_Put_Get_Size</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">number := <span class="number">30</span></span><br><span class="line">testCases := genTestPairs(number)</span><br><span class="line">b := newBucket()</span><br><span class="line"><span class="keyword">var</span> count <span class="keyword">uint64</span></span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> testCases &#123;</span><br><span class="line">ok, err := b.Put(p, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"An error occurs when putting the pair to the bucket:%s,(pair:%#v)"</span>, err, p)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Cannot put the pair to the bucket(pair:%#v)"</span>, p)</span><br><span class="line">&#125;</span><br><span class="line">actualPair := b.Get(p.Key())</span><br><span class="line"><span class="keyword">if</span> actualPair == <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent pair:expected:%#v,actual:%#v"</span>, p.Element(), <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line">ok, err = b.Put(p, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"An error occurs when putting the repeat pair to the bucket:%s,(pair:%#v)"</span>, err, p)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Cannot put the repeat pair to the bucket(pair:%#v)"</span>, p)</span><br><span class="line">&#125;</span><br><span class="line">count++</span><br><span class="line"><span class="keyword">if</span> b.Size() != count &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent size:expected:%d,actual:%d"</span>, count, b.Size())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> b.Size() != <span class="keyword">uint64</span>(number) &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent size:expected:%d,actual:%d"</span>, number, b.Size())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestBucket_PutInParallel</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">number := <span class="number">5</span></span><br><span class="line">testCases := genNoRepeatTestPairs(number)</span><br><span class="line">b := newBucket()</span><br><span class="line">lock := <span class="built_in">new</span>(sync.Mutex)</span><br><span class="line">testFunc := <span class="function"><span class="keyword">func</span><span class="params">(p Pair, t *testing.T)</span> <span class="title">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Parallel()</span><br><span class="line">ok, err := b.Put(p, lock)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"An error occurs when putting the pair to the bucket:%s,(pair:%#v)"</span>, err, p)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Cannot put the pair to the bucket(pair:%#v)"</span>, p)</span><br><span class="line">&#125;</span><br><span class="line">actualPair := b.Get(p.Key())</span><br><span class="line"><span class="keyword">if</span> actualPair == <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent pair:expected:%#v,actual:%#v"</span>, p.Element(), <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line">ok, err = b.Put(p, lock)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"An error occurs when putting the repeat pair to the bucket:%s,(pair:%#v)"</span>, err, p)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Cannot put the repeat pair to the bucket(pair:%#v)"</span>, p)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">t.Run(<span class="string">"In Parallel"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> testCases &#123;</span><br><span class="line">t.Run(fmt.Sprintf(<span class="string">"key=%s"</span>, p.Key()), testFunc(p, t))</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> b.Size() != <span class="keyword">uint64</span>(number) &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent size:expected:%d,actual:%d"</span>, number, b.Size())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestBucket_GetInParallel</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">number := <span class="number">10</span></span><br><span class="line">testCases := genNoRepeatTestPairs(number)</span><br><span class="line">b := newBucket()</span><br><span class="line">testFunc := <span class="function"><span class="keyword">func</span><span class="params">(p Pair, t *testing.T)</span> <span class="title">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Parallel()</span><br><span class="line">actualPair := b.Get(p.Key())</span><br><span class="line"><span class="keyword">if</span> actualPair == <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Not found pair in bucket!(key:%s)"</span>, p.Key())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> actualPair.Key() != p.Key() &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent key: expected: %s, actual: %s"</span>,</span><br><span class="line">p.Key(), actualPair.Key())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> actualPair.Hash() != p.Hash() &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent hash: expected: %d, actual: %d"</span>,</span><br><span class="line">p.Hash(), actualPair.Hash())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> actualPair.Element() != p.Element() &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent element: expected: %#v, actual: %#v"</span>,</span><br><span class="line">p.Element(), actualPair.Element())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">t.Run(<span class="string">"Get in parallel!"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Run(<span class="string">"Put in parallel"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> testCases &#123;</span><br><span class="line">b.Put(p, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> testCases &#123;</span><br><span class="line">t.Run(fmt.Sprintf(<span class="string">"Get:key=%s"</span>, p.Key()), testFunc(p, t))</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> b.Size() != <span class="keyword">uint64</span>(number) &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent size:expected:%d,actual:%d"</span>, number, b.Size())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestBucket_GetFirstPair</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">number := <span class="number">10</span></span><br><span class="line">testCases := genNoRepeatTestPairs(number)</span><br><span class="line">b := newBucket()</span><br><span class="line"><span class="comment">//版本一：将Pair全部放入Bucket中，然后循环遍历其FirstPair</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> testCases &#123;</span><br><span class="line">b.Put(p, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line">size := b.Size()</span><br><span class="line"><span class="keyword">if</span> size != <span class="keyword">uint64</span>(number) &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent size!(expected:%d,actual%d)"</span>, number, size)</span><br><span class="line">&#125;</span><br><span class="line">currentFirstPair := b.GetFirstPair()</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">int</span>(size - <span class="number">1</span>); i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">expectedPair := testCases[i]</span><br><span class="line"><span class="keyword">if</span> currentFirstPair.Key() != expectedPair.Key() &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent key: expected: %s, actual: %s"</span>,</span><br><span class="line">expectedPair.Key(), currentFirstPair.Key())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> currentFirstPair.Element() != expectedPair.Element() &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent element: expected: %#v, actual: %#v"</span>,</span><br><span class="line">expectedPair.Element(), currentFirstPair.Element())</span><br><span class="line">&#125;</span><br><span class="line">currentFirstPair = currentFirstPair.Next()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> currentFirstPair != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatal(<span class="string">"The next of the last pair in bucket isn't nil"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//版本二：在将Pair循环放入Bucket中时，同时测试其FirstPair</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">testFunc:= func(p Pair,t *testing.T)func(t *testing.T) &#123;</span></span><br><span class="line"><span class="comment">return func(t *testing.T) &#123;</span></span><br><span class="line"><span class="comment">t.Parallel()</span></span><br><span class="line"><span class="comment">b.Put(p,nil)</span></span><br><span class="line"><span class="comment">firstPair:=b.GetFirstPair()</span></span><br><span class="line"><span class="comment">if firstPair.Key()!=p.Key()&#123;</span></span><br><span class="line"><span class="comment">t.Fatalf("Get the incorrect first pair!(expected:%#v,actual:%#v)",p,firstPair)</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">t.Run("GetFirstPair in parallel!", func(t *testing.T) &#123;</span></span><br><span class="line"><span class="comment">for _,p:=range testCases&#123;</span></span><br><span class="line"><span class="comment">t.Run(fmt.Sprintf("key:%#v,element:%#v",p.Key(),p.Element()),testFunc(p,t))</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span> b.Size() != <span class="keyword">uint64</span>(number) &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent size:expected:%d,actual:%d"</span>, number, b.Size())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestBucket_Delete</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">number := <span class="number">2</span></span><br><span class="line">testCases := genTestPairs(number)</span><br><span class="line">b := newBucket()</span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> testCases &#123;</span><br><span class="line">b.Put(p, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line">count := <span class="keyword">uint64</span>(number)</span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> testCases &#123;</span><br><span class="line">ok := b.Delete(p.Key(), <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Couldn't delete a pair from a bucket!(pair:%#v)"</span>, p)</span><br><span class="line">&#125;</span><br><span class="line">actualPair := b.Get(p.Key())</span><br><span class="line"><span class="keyword">if</span> actualPair != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent pair!(expected:%#v,actualPair:%#v)"</span>, <span class="literal">nil</span>, actualPair)</span><br><span class="line">&#125;</span><br><span class="line">ok = b.Delete(p.Key(), <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">t.Fatalf(<span class="string">"An error occurs when delete the pair again!(pair:%#v)"</span>, p)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> count &gt; <span class="number">0</span> &#123;</span><br><span class="line">count--</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> b.Size() != count &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent size:expected:%d,actual:%d"</span>, count, b.Size())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> b.Size() != <span class="number">0</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent size:expected:%d,actual:%d"</span>, <span class="number">0</span>, b.Size())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestBucket_DeleteInParallel</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">number := <span class="number">30</span></span><br><span class="line">testCases := genNoRepeatTestPairs(number)</span><br><span class="line">b := newBucket()</span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> testCases &#123;</span><br><span class="line">b.Put(p, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line">lock := <span class="built_in">new</span>(sync.Mutex)</span><br><span class="line">testFunc := <span class="function"><span class="keyword">func</span><span class="params">(p Pair, t *testing.T)</span> <span class="title">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Parallel()</span><br><span class="line">ok := b.Delete(p.Key(), lock)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Couldn't delete a pair from a bucket!(pair:%#v)"</span>, p)</span><br><span class="line">&#125;</span><br><span class="line">actualPair := b.Get(p.Key())</span><br><span class="line"><span class="keyword">if</span> actualPair != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent pair!(expected:%#v,actualPair:%#v)"</span>, <span class="literal">nil</span>, actualPair)</span><br><span class="line">&#125;</span><br><span class="line">ok = b.Delete(p.Key(), <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">t.Fatalf(<span class="string">"An error occurs when delete the pair again!(pair:%#v)"</span>, p)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">t.Run(<span class="string">"Delete in parallel"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> testCases &#123;</span><br><span class="line">t.Run(fmt.Sprintf(<span class="string">"key:%#v"</span>, p.Key()), testFunc(p, t))</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> b.Size() != <span class="number">0</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent size:expected:%d,actual:%d"</span>, <span class="number">0</span>, b.Size())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestBucket_Clear</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">number := <span class="number">10</span></span><br><span class="line">testCases := genTestPairs(number)</span><br><span class="line">b := newBucket()</span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> testCases &#123;</span><br><span class="line">b.Put(p, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line">b.Clear(<span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> b.Size() != <span class="number">0</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent size: expected: %d, actual: %d"</span>,</span><br><span class="line"><span class="number">0</span>, b.Size())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestBucket_ClearInParallel</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">number := <span class="number">1000</span></span><br><span class="line">testCases := genTestPairs(number)</span><br><span class="line">b := newBucket()</span><br><span class="line">lock := <span class="built_in">new</span>(sync.Mutex)</span><br><span class="line">t.Run(<span class="string">"Clear in parallel!"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Run(<span class="string">"Put"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Parallel()</span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> testCases &#123;</span><br><span class="line">ok, err := b.Put(p, lock)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"An error occurs when putting a pair to the bucket: %s (pair: %#v)"</span>,</span><br><span class="line">err, p)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Couldn't put pair to the bucket! (pair: %#v)"</span>,</span><br><span class="line">p)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">t.Run(<span class="string">"Clear"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Parallel()</span><br><span class="line"><span class="keyword">for</span> i := number; i &gt; <span class="number">0</span>; i-- &#123;</span><br><span class="line">b.Clear(lock)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> b.Size() &gt; <span class="number">0</span> &#123;</span><br><span class="line">t.Log(<span class="string">"Not Clean.Clear again!"</span>)</span><br><span class="line">b.Clear(<span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> b.Size() != <span class="number">0</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent size: expected: %d, actual: %d"</span>,</span><br><span class="line"><span class="number">0</span>, b.Size())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> testCaseNumberForBucketTest = <span class="number">200000</span></span><br><span class="line"><span class="keyword">var</span> testCasesForBucketTest = genNoRepeatTestPairs(testCaseNumberForBucketTest)</span><br><span class="line"><span class="keyword">var</span> testCases1ForBucketTest = testCasesForBucketTest[:testCaseNumberForBucketTest/<span class="number">2</span>]</span><br><span class="line"><span class="keyword">var</span> testCases2ForBucketTest = testCasesForBucketTest[testCaseNumberForBucketTest/<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestBucket_AllInParallel</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">testCases1 := testCases1ForBucketTest</span><br><span class="line">testCases2 := testCases2ForBucketTest</span><br><span class="line">b := newBucket()</span><br><span class="line">lock := <span class="built_in">new</span>(sync.Mutex)</span><br><span class="line">t.Run(<span class="string">"All in parallel"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Run(<span class="string">"Put1"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Parallel()</span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> testCases1 &#123;</span><br><span class="line">existingPair := b.Get(p.Key())</span><br><span class="line"><span class="keyword">if</span> existingPair != <span class="literal">nil</span> &#123;</span><br><span class="line">b.Delete(p.Key(), lock)</span><br><span class="line">&#125;</span><br><span class="line">ok, err := b.Put(p, lock)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Couldn't put a pair to the bucket! (pair: %#v)"</span>, p)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"An error occurs when putting a pair to the bucket: %s (pair: %#v)"</span>,</span><br><span class="line">err, p)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">t.Run(<span class="string">"Put2"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Parallel()</span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> testCases2 &#123;</span><br><span class="line">existingPair := b.Get(p.Key())</span><br><span class="line"><span class="keyword">if</span> existingPair != <span class="literal">nil</span> &#123;</span><br><span class="line">b.Delete(p.Key(), lock)</span><br><span class="line">&#125;</span><br><span class="line">ok, err := b.Put(p, lock)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Couldn't put a pair to the bucket! (pair: %#v)"</span>, p)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"An error occurs when putting a pair to the bucket: %s (pair: %#v)"</span>,</span><br><span class="line">err, p)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">t.Run(<span class="string">"Get1"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Parallel()</span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> testCases1 &#123;</span><br><span class="line">actualPair := b.Get(p.Key())</span><br><span class="line"><span class="keyword">if</span> actualPair == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> actualPair.Key() != p.Key() &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent key: expected: %s, actual: %s"</span>,</span><br><span class="line">p.Key(), actualPair.Key())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> actualPair.Hash() != p.Hash() &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent hash: expected: %d, actual: %d"</span>,</span><br><span class="line">p.Hash(), actualPair.Hash())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> actualPair.Element() != p.Element() &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent element: expected: %#v, actual: %#v"</span>,</span><br><span class="line">p.Element(), actualPair.Element())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">t.Run(<span class="string">"Get2"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Parallel()</span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> testCases2 &#123;</span><br><span class="line">actualPair := b.Get(p.Key())</span><br><span class="line"><span class="keyword">if</span> actualPair == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> actualPair.Key() != p.Key() &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent key: expected: %s, actual: %s"</span>,</span><br><span class="line">p.Key(), actualPair.Key())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> actualPair.Hash() != p.Hash() &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent hash: expected: %d, actual: %d"</span>,</span><br><span class="line">p.Hash(), actualPair.Hash())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> actualPair.Element() != p.Element() &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent element: expected: %#v, actual: %#v"</span>,</span><br><span class="line">p.Element(), actualPair.Element())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">t.Run(<span class="string">"Delete1"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Parallel()</span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> testCases1 &#123;</span><br><span class="line">b.Delete(p.Key(), lock)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">t.Run(<span class="string">"Delete2"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Parallel()</span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> testCases2 &#123;</span><br><span class="line">b.Delete(p.Key(), lock)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">t.Run(<span class="string">"Clear"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Parallel()</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _ = <span class="keyword">range</span> time.Tick(time.Millisecond*<span class="number">10</span>) &#123;</span><br><span class="line">b.Clear(lock)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">&lt;-time.Tick(<span class="number">10</span>*time.Millisecond)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">genTestPairs</span><span class="params">(number <span class="keyword">int</span>)</span> []<span class="title">Pair</span></span> &#123;</span><br><span class="line">testCases := <span class="built_in">make</span>([]Pair, number)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; number; i++ &#123;</span><br><span class="line">testCases[i], _ = newPair(randString(), randElement())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> testCases</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">genNoRepeatTestPairs</span><span class="params">(number <span class="keyword">int</span>)</span> []<span class="title">Pair</span></span> &#123;</span><br><span class="line">testCases := <span class="built_in">make</span>([]Pair, number)</span><br><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; number; i++ &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">p, _ := newPair(randString(), randElement())</span><br><span class="line"><span class="keyword">if</span> _, ok := m[p.Key()]; !ok &#123;</span><br><span class="line">testCases[i] = p</span><br><span class="line">m[p.Key()] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> testCases</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="segment-test-go"><a href="#segment-test-go" class="headerlink" title="segment_test.go"></a>segment_test.go</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSegment_New</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">s := newSegment(<span class="number">-1</span>, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> s == <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatal(<span class="string">"Couldn't new segment!"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSegment_Put</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">number := <span class="number">10</span></span><br><span class="line">testCases := genTestPairs(number)</span><br><span class="line">s := newSegment(<span class="number">-1</span>, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">var</span> count <span class="keyword">uint64</span></span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> testCases &#123;</span><br><span class="line">ok, err := s.Put(p)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"An error occurs when put a pair to segment:%s!(key=%#v)"</span>, err, p.Key())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Couldn't put a pair to segment!(key=%#v)"</span>, p.Key())</span><br><span class="line">&#125;</span><br><span class="line">actualPair := s.Get(p.Key())</span><br><span class="line"><span class="keyword">if</span> actualPair == <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Couldn't get a pair from segment!(expected=%#v,actual=%#v)"</span>, p.Key(), <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line">ok, err = s.Put(p)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"An error occurs when repeat put a pair to segment:%s!(key=%#v)"</span>, err, p.Key())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Couldn't repeat put a pair to segment!(key=%#v)"</span>, p.Key())</span><br><span class="line">&#125;</span><br><span class="line">count++</span><br><span class="line"><span class="keyword">if</span> s.Size() != count &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent size!(expected=%#v,actual=%#v)"</span>,</span><br><span class="line">count, s.Size())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> s.Size() != <span class="keyword">uint64</span>(number) &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent size!(expected=%#v,actual=%#v)"</span>, number, s.Size())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSegment_PutInParallel</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">number := <span class="number">10</span></span><br><span class="line">testCases := genTestPairs(number)</span><br><span class="line">s := newSegment(<span class="number">-1</span>, <span class="literal">nil</span>)</span><br><span class="line">testFunc := <span class="function"><span class="keyword">func</span><span class="params">(p Pair, t *testing.T)</span> <span class="title">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Parallel()</span><br><span class="line">ok, err := s.Put(p)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"An error occurs when put a pair to segment:%s!(key=%#v)"</span>, err, p.Key())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Couldn't put a pair to segment!(key=%#v)"</span>, p.Key())</span><br><span class="line">&#125;</span><br><span class="line">actualPair := s.Get(p.Key())</span><br><span class="line"><span class="keyword">if</span> actualPair == <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Couldn't get a pair from segment!(expected=%#v,actual=%#v)"</span>, p.Key(), <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line">ok, err = s.Put(p)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"An error occurs when repeat put a pair to segment:%s!(key=%#v)"</span>, err, p.Key())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Couldn't repeat put a pair to segment!(key=%#v)"</span>, p.Key())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">t.Run(<span class="string">"Put in parallel"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> testCases &#123;</span><br><span class="line">t.Run(fmt.Sprintf(<span class="string">"Put:key=%#v"</span>, p.Key()), testFunc(p, t))</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> s.Size() != <span class="keyword">uint64</span>(number) &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent size!(expected=%#v,actual=%#v)"</span>, number, s.Size())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSegment_GetInParallel</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">number := <span class="number">10</span></span><br><span class="line">testCases := genTestPairs(number)</span><br><span class="line">s := newSegment(<span class="number">-1</span>, <span class="literal">nil</span>)</span><br><span class="line">testFunc := <span class="function"><span class="keyword">func</span><span class="params">(p Pair, t *testing.T)</span> <span class="title">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Parallel()</span><br><span class="line">actualPair := s.Get(p.Key())</span><br><span class="line"><span class="keyword">if</span> actualPair == <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Couldn't get a pair from segment!(expected=%#v,actual=%#v)"</span>, p.Key(), <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> actualPair.Key() != p.Key() &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent key!(expected=%#v,actual=%#v)"</span>, p.Key(), actualPair.Key())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> actualPair.Hash() != p.Hash() &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent hash!(expected=%d, actual=%d)"</span>,</span><br><span class="line">p.Hash(), actualPair.Hash())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> actualPair.Element() != p.Element() &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent element!(expected=%#v,actual=%#v)"</span>, p.Element(), actualPair.Element())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">t.Run(<span class="string">"Get in parallel"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Run(<span class="string">"Put in parallel"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> testCases &#123;</span><br><span class="line">s.Put(p)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> testCases &#123;</span><br><span class="line">t.Run(fmt.Sprintf(<span class="string">"Get:key=%#v"</span>, p.Key()), testFunc(p, t))</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> s.Size() != <span class="keyword">uint64</span>(number) &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent size!(expected=%#v,actual=%#v)"</span>, number, s.Size())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSegment_Delete</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">number := <span class="number">10</span></span><br><span class="line">testCases := genTestPairs(number)</span><br><span class="line">s := newSegment(<span class="number">-1</span>, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> testCases &#123;</span><br><span class="line">s.Put(p)</span><br><span class="line">&#125;</span><br><span class="line">count := <span class="keyword">uint64</span>(number)</span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> testCases &#123;</span><br><span class="line">ok := s.Delete(p.Key())</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Couldn't delete a pair from segment! (key=%#v)"</span>, p.Key())</span><br><span class="line">&#125;</span><br><span class="line">actualPair := s.Get(p.Key())</span><br><span class="line"><span class="keyword">if</span> actualPair != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent pair!(expected=%#v, actual=%#v)"</span>,</span><br><span class="line"><span class="literal">nil</span>, actualPair)</span><br><span class="line">&#125;</span><br><span class="line">ok = s.Delete(p.Key())</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Couldn't delete a pair from segment again! (key=%#v)"</span>, p.Key())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> count &gt; <span class="number">0</span> &#123;</span><br><span class="line">count--</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> s.Size() != count &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent size!(expected=%d, actual=%d)"</span>,</span><br><span class="line">count, s.Size())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> s.Size() != <span class="number">0</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent size!(expected=%#v,actual=%#v)"</span>, <span class="number">0</span>, s.Size())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSegment_DeleteInParallel</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">number := <span class="number">10</span></span><br><span class="line">testCases := genNoRepeatTestPairs(number)</span><br><span class="line">s := newSegment(<span class="number">-1</span>, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> testCases &#123;</span><br><span class="line">s.Put(p)</span><br><span class="line">&#125;</span><br><span class="line">testFunc := <span class="function"><span class="keyword">func</span><span class="params">(p Pair, t *testing.T)</span> <span class="title">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Parallel()</span><br><span class="line">ok := s.Delete(p.Key())</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Couldn't delete a pair from segment! (key=%#v)"</span>, p.Key())</span><br><span class="line">&#125;</span><br><span class="line">actualPair := s.Get(p.Key())</span><br><span class="line"><span class="keyword">if</span> actualPair != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent pair!(expected=%#v, actual=%#v)"</span>,</span><br><span class="line"><span class="literal">nil</span>, actualPair)</span><br><span class="line">&#125;</span><br><span class="line">ok = s.Delete(p.Key())</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Couldn't delete a pair from segment again! (key=%#v)"</span>, p.Key())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">t.Run(<span class="string">"Delete in parallel"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> testCases &#123;</span><br><span class="line">t.Run(fmt.Sprintf(<span class="string">"Delete:key=%#v"</span>, p.Key()), testFunc(p, t))</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> s.Size() != <span class="number">0</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent size!(expected=%#v,actual=%#v)"</span>, <span class="number">0</span>, s.Size())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> testCaseNumberForSegment = <span class="number">200000</span></span><br><span class="line"><span class="keyword">var</span> testCasesForSegment = genNoRepeatTestPairs(testCaseNumberForSegment)</span><br><span class="line"><span class="keyword">var</span> testCases1ForSegment = testCasesForSegment[:testCaseNumberForSegment/<span class="number">2</span>]</span><br><span class="line"><span class="keyword">var</span> testCases2ForSegment = testCasesForSegment[testCaseNumberForSegment/<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSegment_AllInParallel</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">testCases1 := testCases1ForBucketTest</span><br><span class="line">testCases2 := testCases2ForBucketTest</span><br><span class="line">s := newSegment(<span class="number">-1</span>, <span class="literal">nil</span>)</span><br><span class="line">t.Run(<span class="string">"All in parallel"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Run(<span class="string">"Put1"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Parallel()</span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> testCases1 &#123;</span><br><span class="line">_, err := s.Put(p)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"An error occurs when putting a pair to the segment:%s (key=%#v)"</span>,</span><br><span class="line">err, p.Key())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">t.Run(<span class="string">"Put2"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Parallel()</span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> testCases2 &#123;</span><br><span class="line">_, err := s.Put(p)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"An error occurs when putting a pair to the segment:%s (key=%#v)"</span>,</span><br><span class="line">err, p.Key())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">t.Run(<span class="string">"Get1"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Parallel()</span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> testCases1 &#123;</span><br><span class="line">actualPair := s.Get(p.Key())</span><br><span class="line"><span class="keyword">if</span> actualPair == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> actualPair.Key() != p.Key() &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent key!(expected=%#v,actual=%#v)"</span>, p.Key(), actualPair.Key())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> actualPair.Hash() != p.Hash() &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent hash!(expected=%d, actual=%d)"</span>,</span><br><span class="line">p.Hash(), actualPair.Hash())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> actualPair.Element() != p.Element() &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent element!(expected=%#v,actual=%#v)"</span>, p.Element(), actualPair.Element())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">t.Run(<span class="string">"Get2"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Parallel()</span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> testCases2 &#123;</span><br><span class="line">actualPair := s.Get(p.Key())</span><br><span class="line"><span class="keyword">if</span> actualPair == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> actualPair.Key() != p.Key() &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent key!(expected=%#v,actual=%#v)"</span>, p.Key(), actualPair.Key())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> actualPair.Hash() != p.Hash() &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent hash!(expected=%d, actual=%d)"</span>,</span><br><span class="line">p.Hash(), actualPair.Hash())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> actualPair.Element() != p.Element() &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent element!(expected=%#v,actual=%#v)"</span>, p.Element(), actualPair.Element())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">t.Run(<span class="string">"Delete1"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Parallel()</span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> testCases1 &#123;</span><br><span class="line">s.Delete(p.Key())</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">t.Run(<span class="string">"Delete2"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Parallel()</span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> testCases2 &#123;</span><br><span class="line">s.Delete(p.Key())</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">t.Log(s.Size())</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="cmap-test-go"><a href="#cmap-test-go" class="headerlink" title="cmap_test.go"></a>cmap_test.go</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestConcurrentMap_New</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> concurrency <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> pairRedistributor PairRedistributor</span><br><span class="line">cmap, err := NewConcurrenctMap(concurrency, pairRedistributor)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"No error occurs when new concurrent map with concurrency:%d,shouldn't be the case"</span>, concurrency)</span><br><span class="line">&#125;</span><br><span class="line">concurrency = MAX_CONCURRENCY + <span class="number">1</span></span><br><span class="line">cmap, err = NewConcurrenctMap(concurrency, pairRedistributor)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"No error occurs when new concurrent map with concurrency:%d,shouldn't be the case"</span>, concurrency)</span><br><span class="line">&#125;</span><br><span class="line">concurrency = <span class="number">16</span></span><br><span class="line">cmap, err = NewConcurrenctMap(concurrency, pairRedistributor)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"An error occurs when new a concurrent map: %s (concurrency=%d, pairRedistributor=%#v)"</span>,</span><br><span class="line">err, concurrency, pairRedistributor)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> cmap == <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Couldn't a new concurrent map! (concurrency= %d, pairRedistributor=%#v)"</span>,</span><br><span class="line">concurrency, pairRedistributor)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> cmap.Concurrency() != concurrency &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent concurrency: expected= %d, actual= %d"</span>,</span><br><span class="line">concurrency, cmap.Concurrency())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestConcurrentMap_Put</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">number := <span class="number">30</span></span><br><span class="line">TestCases := genTestPairs(number)</span><br><span class="line">concurrency := <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> pairRedistributor PairRedistributor</span><br><span class="line">cmap, _ := NewConcurrenctMap(concurrency, pairRedistributor)</span><br><span class="line"><span class="keyword">var</span> count <span class="keyword">uint64</span></span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> TestCases &#123;</span><br><span class="line">key := p.Key()</span><br><span class="line">element := p.Element()</span><br><span class="line">ok, err := cmap.Put(key, element)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"An error occurs when put a key-element in concurrent map:%s!(key=%s,element=%#v)"</span>, err, key, element)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Couldn't put key element to the concurrent map!(key=%s,element=%#v)"</span>, key, element)</span><br><span class="line">&#125;</span><br><span class="line">actualElement := cmap.Get(key)</span><br><span class="line"><span class="keyword">if</span> actualElement == <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent element!(expected= %#v, actual= %#v)"</span>,</span><br><span class="line">element, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line">ok, err = cmap.Put(key, element)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"An error occurs when putting a repeated key element to the cmap:%s (key= %s, element= %#v)"</span>,</span><br><span class="line">err, key, element)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Couldn't put key element to the cmap! (key= %s, element= %#v)"</span>,</span><br><span class="line">key, element)</span><br><span class="line">&#125;</span><br><span class="line">count++</span><br><span class="line"><span class="keyword">if</span> cmap.Len() != count &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent size!(expected= %d, actual= %d)"</span>,</span><br><span class="line">count, cmap.Len())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestConcurrentMap_PutInParallel</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">number := <span class="number">30</span></span><br><span class="line">TestCases := genNoRepeatTestPairs(number)</span><br><span class="line">concurrency := number / <span class="number">2</span></span><br><span class="line">cmap, _ := NewConcurrenctMap(concurrency, <span class="literal">nil</span>)</span><br><span class="line">testFunc := <span class="function"><span class="keyword">func</span><span class="params">(key <span class="keyword">string</span>, element <span class="keyword">interface</span>&#123;&#125;, t *testing.T)</span> <span class="title">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Parallel()</span><br><span class="line">ok, err := cmap.Put(key, element)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"An error occurs when put a key-element in concurrent map:%s!(key=%s,element=%#v)"</span>, err, key, element)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Couldn't put key element to the concurrent map!(key=%s,element=%#v)"</span>, key, element)</span><br><span class="line">&#125;</span><br><span class="line">actualElement := cmap.Get(key)</span><br><span class="line"><span class="keyword">if</span> actualElement == <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent element!(expected= %#v, actual= %#v)"</span>,</span><br><span class="line">element, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line">ok, err = cmap.Put(key, element)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"An error occurs when putting a repeated key element to the cmap:%s (key= %s, element= %#v)"</span>,</span><br><span class="line">err, key, element)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Couldn't put key element to the cmap! (key= %s, element= %#v)"</span>,</span><br><span class="line">key, element)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">t.Run(<span class="string">"Put in parallel"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> TestCases &#123;</span><br><span class="line">key := p.Key()</span><br><span class="line">element := p.Element()</span><br><span class="line">t.Run(fmt.Sprintf(<span class="string">"Put:(key=%s,element=%#v)"</span>, key, element), testFunc(key, element, t))</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> cmap.Len() != <span class="keyword">uint64</span>(number) &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent size!(expected= %d, actual= %d)"</span>,</span><br><span class="line">number, cmap.Len())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestConcurrentMap_GetInParallel</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">number := <span class="number">30</span></span><br><span class="line">concurrency := number / <span class="number">2</span></span><br><span class="line">testCases := genNoRepeatTestPairs(number)</span><br><span class="line">cmap, _ := NewConcurrenctMap(concurrency, <span class="literal">nil</span>)</span><br><span class="line">testFunc := <span class="function"><span class="keyword">func</span><span class="params">(key <span class="keyword">string</span>, element <span class="keyword">interface</span>&#123;&#125;, t *testing.T)</span> <span class="title">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Parallel()</span><br><span class="line">actualElement := cmap.Get(key)</span><br><span class="line"><span class="keyword">if</span> actualElement == <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent element!(expected= %#v, actual= %#v)"</span>,</span><br><span class="line">element, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> actualElement != element &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent element!(expected= %#v, actual= %#v)"</span>,</span><br><span class="line">element, actualElement)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">t.Run(<span class="string">"Get in parallel"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Run(<span class="string">"Put in parallel"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> testCases &#123;</span><br><span class="line">cmap.Put(p.Key(), p.Element())</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> testCases &#123;</span><br><span class="line">t.Run(fmt.Sprintf(<span class="string">"Get:(key=%s,element=%#v)"</span>, p.Key(), p.Element()), testFunc(p.Key(), p.Element(), t))</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> cmap.Len() != <span class="keyword">uint64</span>(number) &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent size!(expected= %d, actual= %d)"</span>,</span><br><span class="line">number, cmap.Len())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestConcurrentMap_Delete</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">number := <span class="number">30</span></span><br><span class="line">concurrency := number / <span class="number">2</span></span><br><span class="line">testCases := genNoRepeatTestPairs(number)</span><br><span class="line">cmap, _ := NewConcurrenctMap(concurrency, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> testCases &#123;</span><br><span class="line">cmap.Put(p.Key(), p.Element())</span><br><span class="line">&#125;</span><br><span class="line">count := <span class="keyword">uint64</span>(number)</span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> testCases &#123;</span><br><span class="line">ok := cmap.Delete(p.Key())</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Couldn't delete a key-element from cmap! (key= %s, element= %#v)"</span>,</span><br><span class="line">p.Key(), p.Element())</span><br><span class="line">&#125;</span><br><span class="line">actualElement := cmap.Get(p.Key())</span><br><span class="line"><span class="keyword">if</span> actualElement != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent key-element!(expected= %#v, actual= %#v)"</span>,</span><br><span class="line"><span class="literal">nil</span>, actualElement)</span><br><span class="line">&#125;</span><br><span class="line">ok = cmap.Delete(p.Key())</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Couldn't delete a key-element from cmap again! (key= %s, element= %#v)"</span>,</span><br><span class="line">p.Key(), p.Element())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> count &gt; <span class="number">0</span> &#123;</span><br><span class="line">count--</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> count != cmap.Len() &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent size!(expected= %d, actual= %d)"</span>,</span><br><span class="line">count, cmap.Len())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> cmap.Len() != <span class="number">0</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent size!(expected= %d, actual= %d)"</span>,</span><br><span class="line"><span class="number">0</span>, cmap.Len())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestConcurrentMap_DeleteInParallel</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">number := <span class="number">30</span></span><br><span class="line">concurrency := number / <span class="number">2</span></span><br><span class="line">testCases := genNoRepeatTestPairs(number)</span><br><span class="line">cmap, _ := NewConcurrenctMap(concurrency, <span class="literal">nil</span>)</span><br><span class="line">testFunc := <span class="function"><span class="keyword">func</span><span class="params">(key <span class="keyword">string</span>, element <span class="keyword">interface</span>&#123;&#125;, t *testing.T)</span> <span class="title">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">ok := cmap.Delete(key)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Couldn't delete a key-element from cmap! (key= %s, element= %#v)"</span>,</span><br><span class="line">key, element)</span><br><span class="line">&#125;</span><br><span class="line">actualElement := cmap.Get(key)</span><br><span class="line"><span class="keyword">if</span> actualElement != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent key-element!(expected= %#v, actual= %#v)"</span>,</span><br><span class="line"><span class="literal">nil</span>, actualElement)</span><br><span class="line">&#125;</span><br><span class="line">ok = cmap.Delete(key)</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Couldn't delete a key-element from cmap again! (key= %s, element= %#v)"</span>,</span><br><span class="line">key, element)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">t.Run(<span class="string">"Delete in parallel"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Run(<span class="string">"Put in parallel"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> testCases &#123;</span><br><span class="line">cmap.Put(p.Key(), p.Element())</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> testCases &#123;</span><br><span class="line">t.Run(fmt.Sprintf(<span class="string">"Delete:(key=%s,element=%#v)"</span>, p.Key(), p.Element()), testFunc(p.Key(), p.Element(), t))</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> cmap.Len() != <span class="number">0</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent size!(expected= %d, actual= %d)"</span>,</span><br><span class="line"><span class="number">0</span>, cmap.Len())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> testCaseNumberForCmapTest = <span class="number">200000</span></span><br><span class="line"><span class="keyword">var</span> testCasesForCmapTest = genNoRepeatTestPairs(testCaseNumberForCmapTest)</span><br><span class="line"><span class="keyword">var</span> testCases1ForCmapTest = testCasesForCmapTest[:testCaseNumberForCmapTest/<span class="number">2</span>]</span><br><span class="line"><span class="keyword">var</span> testCases2ForCmapTest = testCasesForCmapTest[testCaseNumberForCmapTest/<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestConcurrentMap_AllInParallel</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">testCases1 := testCases1ForCmapTest</span><br><span class="line">testCases2 := testCases2ForCmapTest</span><br><span class="line">concurrency := testCaseNumberForCmapTest / <span class="number">4</span></span><br><span class="line">cmap, _ := NewConcurrenctMap(concurrency, <span class="literal">nil</span>)</span><br><span class="line">t.Run(<span class="string">"All in parallel"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Run(<span class="string">"Put1"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Parallel()</span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> testCases1 &#123;</span><br><span class="line">_, err := cmap.Put(p.Key(), p.Element())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"An error occurs when putting a key-element to the cmap: %s (key= %s, element= %#v)"</span>,</span><br><span class="line">err, p.Key(), p.Element())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">t.Run(<span class="string">"Put2"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Parallel()</span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> testCases2 &#123;</span><br><span class="line">_, err := cmap.Put(p.Key(), p.Element())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"An error occurs when putting a key-element to the cmap: %s (key= %s, element= %#v)"</span>,</span><br><span class="line">err, p.Key(), p.Element())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">t.Run(<span class="string">"Get1"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Parallel()</span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> testCases1 &#123;</span><br><span class="line">actualElement := cmap.Get(p.Key())</span><br><span class="line"><span class="keyword">if</span> actualElement == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> actualElement != p.Element() &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent element!(expected=%#v,actual=%#v)"</span>, p.Element(), actualElement)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">t.Run(<span class="string">"Get2"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Parallel()</span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> testCases2 &#123;</span><br><span class="line">actualElement := cmap.Get(p.Key())</span><br><span class="line"><span class="keyword">if</span> actualElement == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> actualElement != p.Element() &#123;</span><br><span class="line">t.Fatalf(<span class="string">"Inconsistent element!(expected=%#v,actual=%#v)"</span>, p.Element(), actualElement)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">t.Run(<span class="string">"Delete1"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Parallel()</span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> testCases1 &#123;</span><br><span class="line">cmap.Delete(p.Key())</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">t.Run(<span class="string">"Delete2"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Parallel()</span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> testCases2 &#123;</span><br><span class="line">cmap.Delete(p.Key())</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//这里执行删除操作，最后是删不光的，因为前期的一些删除操作都失败了（数据未放入）</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="export-test-go"><a href="#export-test-go" class="headerlink" title="export_test.go"></a>export_test.go</h3><p>使用外部测试方法<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cmap</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> GenNoRepeatTestPairs = genNoRepeatTestPairs</span><br></pre></td></tr></table></figure></p><h3 id="cmap-benchmark-test-go"><a href="#cmap-benchmark-test-go" class="headerlink" title="cmap_benchmark_test.go"></a>cmap_benchmark_test.go</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//并发安全字典与普通字典性能比较</span></span><br><span class="line"><span class="keyword">package</span> cmap_test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">cmap <span class="string">"book/并发编程/同步/并发安全的字典"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line"><span class="string">"testing"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//!+   Put</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkConcurrentMap_PutVariable</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> number = <span class="number">20</span></span><br><span class="line">testCases := cmap.GenNoRepeatTestPairs(number)</span><br><span class="line">concurrency := number / <span class="number">4</span></span><br><span class="line">cmap, _ := cmap.NewConcurrenctMap(concurrency, <span class="literal">nil</span>)</span><br><span class="line">b.ResetTimer()</span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> testCases &#123;</span><br><span class="line">key := p.Key()</span><br><span class="line">element := p.Element()</span><br><span class="line">b.Run(key, <span class="function"><span class="keyword">func</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">cmap.Put(key, element)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkConcurrentMap_PutInvariable</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">number := <span class="number">20</span></span><br><span class="line">concurrency := number / <span class="number">4</span></span><br><span class="line">cmap, _ := cmap.NewConcurrenctMap(concurrency, <span class="literal">nil</span>)</span><br><span class="line">key := <span class="string">"invariable key"</span></span><br><span class="line">b.ResetTimer()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; number; i++ &#123;</span><br><span class="line">element := strconv.Itoa(i)</span><br><span class="line">b.Run(key, <span class="function"><span class="keyword">func</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; b.N; j++ &#123;</span><br><span class="line">cmap.Put(key, element)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkMap_Put</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">number := <span class="number">10</span></span><br><span class="line">testCases := cmap.GenNoRepeatTestPairs(number)</span><br><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">b.ResetTimer()</span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> testCases &#123;</span><br><span class="line">key := p.Key()</span><br><span class="line">element := p.Element()</span><br><span class="line">b.Run(key, <span class="function"><span class="keyword">func</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">m[key] = element</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//!+  Get</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkConcurrentMap_Get</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">number := <span class="number">100000</span></span><br><span class="line">testCases := cmap.GenNoRepeatTestPairs(number)</span><br><span class="line">concurrency := number / <span class="number">4</span></span><br><span class="line">cmap, _ := cmap.NewConcurrenctMap(concurrency, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> testCases &#123;</span><br><span class="line">cmap.Put(p.Key(), p.Element())</span><br><span class="line">&#125;</span><br><span class="line">b.ResetTimer()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">key := testCases[rand.Intn(number)].Key()</span><br><span class="line">b.Run(key, <span class="function"><span class="keyword">func</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; b.N; j++ &#123;</span><br><span class="line">cmap.Get(key)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkMap_Get</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">number := <span class="number">100000</span></span><br><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">testCases := cmap.GenNoRepeatTestPairs(number)</span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> testCases &#123;</span><br><span class="line">m[p.Key()] = p.Element()</span><br><span class="line">&#125;</span><br><span class="line">b.ResetTimer()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">key := testCases[rand.Intn(number)].Key()</span><br><span class="line">b.Run(key, <span class="function"><span class="keyword">func</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; b.N; j++ &#123;</span><br><span class="line">_ = m[key]</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//!+   Delete</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkConcurrentMap_Delete</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">number := <span class="number">100000</span></span><br><span class="line">concurrency := number / <span class="number">4</span></span><br><span class="line">testCases := cmap.GenNoRepeatTestPairs(number)</span><br><span class="line">cmap, _ := cmap.NewConcurrenctMap(concurrency, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> testCases &#123;</span><br><span class="line">cmap.Put(p.Key(), p.Element())</span><br><span class="line">&#125;</span><br><span class="line">b.ResetTimer()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">20</span>; i++ &#123;</span><br><span class="line">key := testCases[rand.Intn(number)].Key()</span><br><span class="line">b.Run(key, <span class="function"><span class="keyword">func</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; b.N; j++ &#123;</span><br><span class="line">cmap.Delete(key)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkMap_Delete</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">number := <span class="number">100000</span></span><br><span class="line">testCases := cmap.GenNoRepeatTestPairs(number)</span><br><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> testCases &#123;</span><br><span class="line">m[p.Key()] = p.Element()</span><br><span class="line">&#125;</span><br><span class="line">b.ResetTimer()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">20</span>; i++ &#123;</span><br><span class="line">key := testCases[rand.Intn(number)].Key()</span><br><span class="line">b.Run(key, <span class="function"><span class="keyword">func</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; b.N; j++ &#123;</span><br><span class="line"><span class="built_in">delete</span>(m, key)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//!+   Len</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkConcurrentMap_Len</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">number:=<span class="number">100000</span></span><br><span class="line">concurrency:=number/<span class="number">4</span></span><br><span class="line">testCases:=cmap.GenNoRepeatTestPairs(number)</span><br><span class="line">cmap,_:=cmap.NewConcurrenctMap(concurrency,<span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">for</span> _,p:=<span class="keyword">range</span> testCases&#123;</span><br><span class="line">cmap.Put(p.Key(),p.Element())</span><br><span class="line">&#125;</span><br><span class="line">b.ResetTimer()</span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++&#123;</span><br><span class="line">b.Run(fmt.Sprintf(<span class="string">"Len(%d)"</span>,i), <span class="function"><span class="keyword">func</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> j:=<span class="number">0</span>;j&lt;b.N;j++&#123;</span><br><span class="line">cmap.Len()</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkMap_Len</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">number:=<span class="number">100000</span></span><br><span class="line">testCases:=cmap.GenNoRepeatTestPairs(number)</span><br><span class="line">m:=<span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line"><span class="keyword">for</span> _,p:=<span class="keyword">range</span> testCases&#123;</span><br><span class="line">m[p.Key()]=p.Element()</span><br><span class="line">&#125;</span><br><span class="line">b.ResetTimer()</span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++&#123;</span><br><span class="line">b.Run(fmt.Sprintf(<span class="string">"Len(%d)"</span>,i), <span class="function"><span class="keyword">func</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> j:=<span class="number">0</span>;j&lt;b.N;j++&#123;</span><br><span class="line">_=<span class="built_in">len</span>(m)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> golang </category>
          
          <category> 并发 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>map的妙用</title>
      <link href="/2018/08/20/map%E7%9A%84%E5%A6%99%E7%94%A8/"/>
      <url>/2018/08/20/map%E7%9A%84%E5%A6%99%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>使用<code>map</code>来避免生成<code>p</code>的重复<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; number; i++ &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">p, _ = newPair(randString(), randElement())</span><br><span class="line"><span class="keyword">if</span> _, ok := m[p.Key()]; !ok &#123;</span><br><span class="line">testCases[i] = p</span><br><span class="line">m[p.Key()] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> golang </category>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>单元测试</title>
      <link href="/2018/08/18/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
      <url>/2018/08/18/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
      <content type="html"><![CDATA[<a id="more"></a><h2 id="1-Test"><a href="#1-Test" class="headerlink" title="1.Test"></a>1.Test</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"testing"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestA</span><span class="params">(t *testing.T)</span></span>  &#123;</span><br><span class="line">t.Parallel()</span><br><span class="line">time.Sleep(<span class="number">1e9</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestB</span><span class="params">(t *testing.T)</span></span>  &#123;</span><br><span class="line"><span class="keyword">if</span> os.Args[<span class="built_in">len</span>(os.Args)<span class="number">-1</span>]==<span class="string">"b"</span>&#123;</span><br><span class="line">t.Parallel()</span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(<span class="number">1e9</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>普通单元测试：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">go</span> test -v</span><br><span class="line">=== RUN   TestA</span><br><span class="line">=== RUN   TestB</span><br><span class="line">--- PASS: TestB (<span class="number">1.00s</span>)</span><br><span class="line">--- PASS: TestA (<span class="number">1.00s</span>)</span><br><span class="line">PASS</span><br><span class="line">ok      test1     <span class="number">2.083s</span></span><br></pre></td></tr></table></figure></p><p>并行单元测试：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">go</span> test -v -args <span class="string">"b"</span></span><br><span class="line">=== RUN   TestA</span><br><span class="line">=== RUN   TestB</span><br><span class="line">--- PASS: TestB (<span class="number">1.00s</span>)</span><br><span class="line">--- PASS: TestA (<span class="number">1.00s</span>)</span><br><span class="line">PASS</span><br><span class="line">ok      test1     <span class="number">1.077s</span></span><br></pre></td></tr></table></figure></p><p>subtest:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestFoo</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Run(<span class="string">"group"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Run(<span class="string">"A=1"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123; time.Sleep(<span class="number">1e9</span>)&#125;)</span><br><span class="line">t.Run(<span class="string">"A=2"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123; time.Sleep(<span class="number">3e9</span>) &#125;)</span><br><span class="line">t.Run(<span class="string">"B=1"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123; time.Sleep(<span class="number">1e9</span>) &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="2-Example"><a href="#2-Example" class="headerlink" title="2.Example"></a>2.Example</h2><p>比对输出结果和注释是否一致来判断的。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExampleAdd</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(add(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">fmt.Println(add(<span class="number">2</span>, <span class="number">2</span>))</span><br><span class="line"><span class="comment">//Output:</span></span><br><span class="line"><span class="comment">//3</span></span><br><span class="line"><span class="comment">//4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x, y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> golang </category>
          
          <category> test </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>性能测试</title>
      <link href="/2018/08/18/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
      <url>/2018/08/18/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/</url>
      <content type="html"><![CDATA[<a id="more"></a><h2 id="1-测试反射赋值和直接赋值的性能差距"><a href="#1-测试反射赋值和直接赋值的性能差距" class="headerlink" title="1. 测试反射赋值和直接赋值的性能差距"></a>1. 测试反射赋值和直接赋值的性能差距</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Data <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Age <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d=<span class="built_in">new</span>(Data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reset</span><span class="params">(x <span class="keyword">string</span>)</span></span>  &#123;</span><br><span class="line">v:=reflect.ValueOf(d).Elem()</span><br><span class="line">f:=v.FieldByName(<span class="string">"Name"</span>)</span><br><span class="line">f.Set(reflect.ValueOf(x))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">set</span><span class="params">(x <span class="keyword">string</span>)</span></span>  &#123;</span><br><span class="line">d.Name=x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkSet</span><span class="params">(b *testing.B)</span></span>  &#123;</span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;b.N;i++&#123;</span><br><span class="line">set(<span class="string">"gongshen"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkReset</span><span class="params">(b *testing.B)</span></span>  &#123;</span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;b.N;i++&#123;</span><br><span class="line">reset(<span class="string">"gongshen"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> go test -bench .</span><br><span class="line">BenchmarkSet-4          1000000000               1.98 ns/op</span><br><span class="line">BenchmarkReset-4         5000000               313 ns/op</span><br><span class="line">PASS</span><br><span class="line">ok     test 4.168s</span><br><span class="line">// 循环次数是 1000000000 次，每次执行时间为1.98ns</span><br></pre></td></tr></table></figure></p><p>显然差距非常大</p><h2 id="2-优化反射赋值，将反射数据“缓存起来”。"><a href="#2-优化反射赋值，将反射数据“缓存起来”。" class="headerlink" title="2. 优化反射赋值，将反射数据“缓存起来”。"></a>2. 优化反射赋值，将反射数据“缓存起来”。</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> v=reflect.ValueOf(d).Elem()</span><br><span class="line"><span class="keyword">var</span> f=v.FieldByName(<span class="string">"Name"</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reset</span><span class="params">(x <span class="keyword">string</span>)</span></span>  &#123;</span><br><span class="line">f.Set(reflect.ValueOf(x))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优化测试：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> go test -bench .</span><br><span class="line">BenchmarkSet-4          1000000000               1.99 ns/op</span><br><span class="line">BenchmarkReset-4        10000000               122 ns/op</span><br><span class="line">PASS</span><br><span class="line">ok      test  3.651s</span><br></pre></td></tr></table></figure></p><p>显然性能有所提升，但还是不够。</p><h2 id="3-测试方法反射调用和方法直接调用的性能差距"><a href="#3-测试方法反射调用和方法直接调用的性能差距" class="headerlink" title="3. 测试方法反射调用和方法直接调用的性能差距"></a>3. 测试方法<code>反射调用</code>和方法<code>直接调用</code>的性能差距</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Data <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d Data)</span><span class="title">PrintData</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d=<span class="built_in">new</span>(Data)</span><br><span class="line"><span class="keyword">var</span> v=reflect.ValueOf(d)</span><br><span class="line"><span class="keyword">var</span> m=v.MethodByName(<span class="string">"PrintData"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkCall</span><span class="params">(b *testing.B)</span></span>  &#123;</span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;b.N;i++&#123;</span><br><span class="line">d.PrintData()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkRcall</span><span class="params">(b *testing.B)</span></span>  &#123;</span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;b.N;i++ &#123;</span><br><span class="line">m.Call(<span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> go test -bench .</span><br><span class="line">BenchmarkCall-4         2000000000               0.96 ns/op</span><br><span class="line">BenchmarkRcall-4         5000000               366 ns/op</span><br><span class="line">PASS</span><br><span class="line">ok   test  4.307s</span><br></pre></td></tr></table></figure></p><h2 id="4-当benchmark还需要其他设置时，应该重置定时器"><a href="#4-当benchmark还需要其他设置时，应该重置定时器" class="headerlink" title="4. 当benchmark还需要其他设置时，应该重置定时器"></a>4. 当benchmark还需要其他设置时，应该重置定时器</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkAdd</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">b.ResetTimer() <span class="comment">//重置</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">_ = add(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> i == <span class="number">1</span> &#123;</span><br><span class="line">b.StopTimer() <span class="comment">//暂停</span></span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">b.StartTimer() <span class="comment">//恢复</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> golang </category>
          
          <category> test </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>test_Readme</title>
      <link href="/2018/08/18/test_Readme/"/>
      <url>/2018/08/18/test_Readme/</url>
      <content type="html"><![CDATA[<a id="more"></a><h1 id="Test：矫正行为"><a href="#Test：矫正行为" class="headerlink" title="Test：矫正行为"></a>Test：矫正行为</h1><h3 id="包内测试"><a href="#包内测试" class="headerlink" title="包内测试"></a>包内测试</h3><ul><li>文件名以<code>Test</code>开头</li><li>指定运行匹配的测试函数：<code>-run=&quot;A|B&quot;</code></li><li><code>t.Error</code>或者<code>t.Errorf</code>并不会因为测试失败而停止下面的测试</li><li><code>t.Fatal</code>和<code>t.Fatalf</code>会因为测试失败而终止当前gorouting</li></ul><h3 id="运行更comprehensive案列"><a href="#运行更comprehensive案列" class="headerlink" title="运行更comprehensive案列"></a>运行更comprehensive案列</h3><ul><li>table-driven 测试</li><li>randomized 测试</li></ul><h3 id="覆盖率测试"><a href="#覆盖率测试" class="headerlink" title="覆盖率测试"></a>覆盖率测试</h3><ul><li><code>go test -cover</code>：语句覆盖率测试</li><li><code>go test -cover -coverprofile c.out</code>：将结果输出到文件（默认set模式，记录语句是否覆盖）</li><li><code>go test -cover -coverprofile c.out -covermode count</code>：更改为count模式，记录语句覆盖次数</li><li><code>go tool cover -html=c.out</code>：以c.out文件在浏览器显示</li><li><code>go tool cover -func=c.out</code>：显示函数细节</li></ul><h3 id="外部测试"><a href="#外部测试" class="headerlink" title="外部测试"></a>外部测试</h3><p>我们知道两个package不能存在于同一个文件中，但是有一种特殊的外部测试包。如果文件中的包名<code>b</code>，那么可以创建外部测试包<code>b_test</code>。</p><p><span style="border-bottom:2px solid red;">创建一个内部测试文件（export_test.go）</span>：将需要的内部暴露给外部测试包;测试文件中的函数和变量只能是当前package下的测试文件能访问</p><p><span style="border-bottom:2px solid red;">仅显示开发代码文件</span>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go list -f=&#123;&#123;.GoFiles&#125;&#125; fmt</span><br></pre></td></tr></table></figure></p><p><span style="border-bottom:2px solid red;">仅显示包内测试代码</span>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go list -f=&#123;&#123;.TestGoFiles&#125;&#125; fmt</span><br></pre></td></tr></table></figure></p><p><span style="border-bottom:2px solid red;">仅显示外部测试代码</span>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go list -f=&#123;&#123;.XTestGoFiles&#125;&#125; fmt</span><br></pre></td></tr></table></figure></p><h1 id="Profile"><a href="#Profile" class="headerlink" title="Profile"></a>Profile</h1><p><code>go test</code>会把可执行文件删除在完成测试之后，加上<code>-cpuprofile</code>标志可以保留其可执行文件<br>使用<code>go tool pprof</code>再加上<code>可执行文件</code>就可以解析profile文件</p><ul><li><code>go test -run=none -bench=ClientServerParallelTLS64 -cpuprofile=cpu.log net/http</code>：会生成<em>cpu.log</em>和<em>http.test.exe</em></li><li><code>go tool pprof -text -nodecount=10 ./http.test.exe cpu.log</code>：使用<em>pprof</em>工具分析cpu使用文件</li><li>-cpuprofile：列出使用最多CPU的函数</li><li>-memprofile：列出分配最多内存的语句</li><li>-blockprofile：列出最长阻塞gorouting的运算</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">flat  flat%   sum%        cum   cum%</span><br><span class="line">1.10s 20.07% 59.85%      1.10s 20.07%  unicode.IsLetter</span><br><span class="line">0.75s 13.69% 73.54%      0.75s 13.69%  unicode.ToLower</span><br><span class="line">0.39s  7.12% 80.66%      0.44s  8.03%  runtime.mallocgc</span><br></pre></td></tr></table></figure><p>Go运行时会100Hz对CPU进行抽样，也就是10毫秒一次</p><ol><li>第一列表示直接调用该函数总执行了<code>1.10s</code>，也就是抽样110次，占总数的20.07%（总数548次）</li><li>第三列表示前几列加起来占总时间的百分之几</li><li>第四列表示直接调用该函数加上间接调用函数用掉的时间</li><li>第五列表示第四列占的百分比</li></ol><h3 id="graphviz工具的配合使用"><a href="#graphviz工具的配合使用" class="headerlink" title="graphviz工具的配合使用"></a>graphviz工具的配合使用</h3><ol><li><code>go tool pprof ./word.test.exe cpu.log</code>：进入pprof模式</li><li><code>web</code>：浏览器查看整个函数调用的过程</li><li><code>web IsPalindrome</code>：浏览器查看IsPalindrome函数的调用过程</li><li><code>list IsPalindrome</code>：查看IsPalindrome函数每一行的执行时间</li></ol><h1 id="Benchmark：测量操作"><a href="#Benchmark：测量操作" class="headerlink" title="Benchmark：测量操作"></a>Benchmark：测量操作</h1><ul><li>使用<code>ResetTimer,StopTimer,StartTimer</code>等重置计时器，排除一些设定代码的时间</li><li>抵制使用<code>b.N</code>作为参数的诱惑，使用多个固定参数进行测试比较</li><li>性能测试过滤单元测试的输出，所以使用<code>-run=none</code></li></ul><h1 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h1><p>在<code>Example</code>函数中添加预期的答案：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//Output: one</span><br><span class="line">//two</span><br></pre></td></tr></table></figure></p><p>如果输出时随机的话：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//Unordered Output:two</span><br><span class="line">//one</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> golang </category>
          
          <category> test </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>非缓冲通道</title>
      <link href="/2018/08/18/%E9%9D%9E%E7%BC%93%E5%86%B2%E9%80%9A%E9%81%93/"/>
      <url>/2018/08/18/%E9%9D%9E%E7%BC%93%E5%86%B2%E9%80%9A%E9%81%93/</url>
      <content type="html"><![CDATA[<a id="more"></a><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">sendInterval := time.Second</span><br><span class="line">receiveInterval := time.Second * <span class="number">2</span></span><br><span class="line">intChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> cs0, cs1 <span class="keyword">int64</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">intChan &lt;- i</span><br><span class="line">cs1 = time.Now().Unix()</span><br><span class="line"><span class="keyword">if</span> cs0 == <span class="number">0</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Sent:"</span>, i)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Sent:%d [interval:%d s]\n"</span>, i, cs1-cs0)</span><br><span class="line">&#125;</span><br><span class="line">cs0 = time.Now().Unix()</span><br><span class="line">time.Sleep(sendInterval)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">close</span>(intChan)</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">var</span> cs0, cs1 <span class="keyword">int64</span></span><br><span class="line">Loop:</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> v, ok := &lt;-intChan:</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">break</span> Loop</span><br><span class="line">&#125;</span><br><span class="line">cs1 = time.Now().Unix()</span><br><span class="line"><span class="keyword">if</span> cs0 == <span class="number">0</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Receive:"</span>, v)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Receive:%d [interval:%d s]\n"</span>, v, cs0-cs1)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cs0 = time.Now().Unix()</span><br><span class="line">time.Sleep(receiveInterval)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"End!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> golang </category>
          
          <category> channel </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>通道类型转换</title>
      <link href="/2018/08/18/%E9%80%9A%E9%81%93%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
      <url>/2018/08/18/%E9%80%9A%E9%81%93%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
      <content type="html"><![CDATA[<a id="more"></a><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通道类型的转换，利用函数声明将双向通道转化为单向通道是GO的语法糖</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> ch1 = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">1</span>)</span><br><span class="line">_, ok := <span class="keyword">interface</span>&#123;&#125;(ch1).(&lt;-<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">fmt.Println(<span class="string">"chan int =&gt; &lt;-chan int:"</span>, ok)</span><br><span class="line">_, ok = <span class="keyword">interface</span>&#123;&#125;(ch1).(<span class="keyword">chan</span>&lt;- <span class="keyword">int</span>)</span><br><span class="line">fmt.Println(<span class="string">"chan int =&gt; chan&lt;- int:"</span>, ok)</span><br><span class="line">sch := <span class="built_in">make</span>(<span class="keyword">chan</span>&lt;- <span class="keyword">int</span>, <span class="number">1</span>)</span><br><span class="line">_, ok = <span class="keyword">interface</span>&#123;&#125;(sch).(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">fmt.Println(<span class="string">"&lt;-chan int =&gt; chan int:"</span>, ok)</span><br><span class="line">rch := <span class="built_in">make</span>(&lt;-<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">1</span>)</span><br><span class="line">_, ok = <span class="keyword">interface</span>&#123;&#125;(rch).(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">fmt.Println(<span class="string">"chan&lt;- int =&gt; chan int:"</span>, ok)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> golang </category>
          
          <category> channel </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>断续器</title>
      <link href="/2018/08/18/%E6%96%AD%E7%BB%AD%E5%99%A8/"/>
      <url>/2018/08/18/%E6%96%AD%E7%BB%AD%E5%99%A8/</url>
      <content type="html"><![CDATA[<a id="more"></a><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> sum <span class="keyword">int</span></span><br><span class="line">intChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">1</span>)</span><br><span class="line">ticker1 := time.NewTicker(time.Second)</span><br><span class="line">ticker2 := time.NewTicker(time.Second)</span><br><span class="line"><span class="comment">//两种使用断续器用于定时任务的触发器</span></span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> _, ok := &lt;-ticker1.C; ok &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> intChan &lt;- <span class="number">1</span>:</span><br><span class="line"><span class="keyword">case</span> intChan &lt;- <span class="number">2</span>:</span><br><span class="line"><span class="keyword">case</span> intChan &lt;- <span class="number">3</span>:</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _ = <span class="keyword">range</span> ticker2.C &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> intChan &lt;- <span class="number">4</span>:</span><br><span class="line"><span class="keyword">case</span> intChan &lt;- <span class="number">5</span>:</span><br><span class="line"><span class="keyword">case</span> intChan &lt;- <span class="number">6</span>:</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">for</span> e := <span class="keyword">range</span> intChan &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Received:%v\n"</span>, e)</span><br><span class="line">sum += e</span><br><span class="line"><span class="keyword">if</span> sum &gt;= <span class="number">30</span> &#123;</span><br><span class="line">ticker1.Stop()</span><br><span class="line">ticker2.Stop()</span><br><span class="line">fmt.Println(<span class="string">"Ticker has stopped!"</span>)</span><br><span class="line">fmt.Println(sum)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"End.[Receiver]"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> golang </category>
          
          <category> channel </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>对接收操作的超时限定</title>
      <link href="/2018/08/18/%E5%AF%B9%E6%8E%A5%E6%94%B6%E6%93%8D%E4%BD%9C%E7%9A%84%E8%B6%85%E6%97%B6%E9%99%90%E5%AE%9A/"/>
      <url>/2018/08/18/%E5%AF%B9%E6%8E%A5%E6%94%B6%E6%93%8D%E4%BD%9C%E7%9A%84%E8%B6%85%E6%97%B6%E9%99%90%E5%AE%9A/</url>
      <content type="html"><![CDATA[<a id="more"></a><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">intChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">1</span>)</span><br><span class="line">syncChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">intChan &lt;- <span class="number">1</span></span><br><span class="line"><span class="built_in">close</span>(intChan)</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">Loop:</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> e, ok := &lt;-intChan:</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">break</span> Loop</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"Received:%d\n"</span>, e)</span><br><span class="line"><span class="comment">// 设置一个500ms到期的定时器</span></span><br><span class="line"><span class="keyword">case</span> &lt;-time.NewTimer(time.Millisecond * <span class="number">500</span>).C:</span><br><span class="line">fmt.Println(<span class="string">"Timeout!"</span>)</span><br><span class="line"><span class="keyword">break</span> Loop</span><br><span class="line"><span class="comment">// 设置一个500ms到期的定时器</span></span><br><span class="line"><span class="keyword">case</span> &lt;-time.After(time.Millisecond * <span class="number">500</span>):</span><br><span class="line">fmt.Println(<span class="string">"Timeout!"</span>)</span><br><span class="line"><span class="keyword">break</span> Loop</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">syncChan &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">&#125;()</span><br><span class="line">&lt;-syncChan</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> golang </category>
          
          <category> channel </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>定时器的复用</title>
      <link href="/2018/08/18/%E5%AE%9A%E6%97%B6%E5%99%A8%E7%9A%84%E5%A4%8D%E7%94%A8/"/>
      <url>/2018/08/18/%E5%AE%9A%E6%97%B6%E5%99%A8%E7%9A%84%E5%A4%8D%E7%94%A8/</url>
      <content type="html"><![CDATA[<a id="more"></a><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// +build linux</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> timer *time.Timer</span><br><span class="line">intChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">1</span>)</span><br><span class="line">timeout := time.Millisecond * <span class="number">500</span></span><br><span class="line">syncChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">intChan &lt;- i</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">close</span>(intChan)</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> timer == <span class="literal">nil</span> &#123;</span><br><span class="line">timer = time.NewTimer(timeout)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 复用定时器</span></span><br><span class="line">timer.Reset(timeout)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Loop:</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> e, ok := &lt;-intChan:</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">break</span> Loop</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"Received:%d\n"</span>, e)</span><br><span class="line"><span class="keyword">case</span> &lt;-timer.C:</span><br><span class="line">fmt.Println(<span class="string">"Timeout!"</span>)</span><br><span class="line"><span class="keyword">break</span> Loop</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">syncChan &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">&#125;()</span><br><span class="line">&lt;-syncChan</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> golang </category>
          
          <category> channel </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>单向通道与for语句</title>
      <link href="/2018/08/18/%E5%8D%95%E5%90%91%E9%80%9A%E9%81%93%E4%B8%8Efor%E8%AF%AD%E5%8F%A5/"/>
      <url>/2018/08/18/%E5%8D%95%E5%90%91%E9%80%9A%E9%81%93%E4%B8%8Efor%E8%AF%AD%E5%8F%A5/</url>
      <content type="html"><![CDATA[<a id="more"></a><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单向通道的合理应用，对实现类型进行约束</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> strChan = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">syncChan1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;, <span class="number">1</span>)</span><br><span class="line">syncChan2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">go</span> send(strChan, syncChan1, syncChan2)</span><br><span class="line"><span class="keyword">go</span> receive2(strChan, syncChan1, syncChan2)</span><br><span class="line">&lt;-syncChan2</span><br><span class="line">&lt;-syncChan2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">send</span><span class="params">(strChan <span class="keyword">chan</span>&lt;- <span class="keyword">string</span>, syncChan1 <span class="keyword">chan</span>&lt;- <span class="keyword">struct</span>&#123;&#125;, syncChan2 <span class="keyword">chan</span>&lt;- <span class="keyword">struct</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, elem := <span class="keyword">range</span> []<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>&#125; &#123;</span><br><span class="line">strChan &lt;- elem</span><br><span class="line"><span class="keyword">if</span> elem == <span class="string">"c"</span> &#123;</span><br><span class="line">syncChan1 &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">close</span>(strChan)</span><br><span class="line">syncChan2 &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">receive</span><span class="params">(strChan &lt;-<span class="keyword">chan</span> <span class="keyword">string</span>, syncChan1 &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;, syncChan2 <span class="keyword">chan</span>&lt;- <span class="keyword">struct</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">&lt;-syncChan1</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> elem, ok := &lt;-strChan; ok &#123; <span class="comment">//通道关闭后，ok是false的</span></span><br><span class="line">fmt.Println(elem)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">syncChan2 &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用for语句接收通道数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">receive2</span><span class="params">(strChan &lt;-<span class="keyword">chan</span> <span class="keyword">string</span>, syncChan1 &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;, syncChan2 <span class="keyword">chan</span>&lt;- <span class="keyword">struct</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">&lt;-syncChan1</span><br><span class="line"><span class="keyword">for</span> elem := <span class="keyword">range</span> strChan &#123;</span><br><span class="line">fmt.Println(elem)</span><br><span class="line">&#125;</span><br><span class="line">syncChan2 &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> golang </category>
          
          <category> channel </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>与for连用</title>
      <link href="/2018/08/18/%E4%B8%8Efor%E8%BF%9E%E7%94%A8/"/>
      <url>/2018/08/18/%E4%B8%8Efor%E8%BF%9E%E7%94%A8/</url>
      <content type="html"><![CDATA[<a id="more"></a><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// break语句可以直接跳出select</span></span><br><span class="line"><span class="comment">// 这里使用了for循环，使用标签跳出循环</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">intChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">intChan &lt;- i</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 记得发送完要关闭通道</span></span><br><span class="line"><span class="built_in">close</span>(intChan)</span><br><span class="line">syncChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;, <span class="number">1</span>)</span><br><span class="line"><span class="comment">// 一般将select放在另外的gorouting中，即使阻塞也不会死锁</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">Loop:</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> e1, ok := &lt;-intChan:</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">fmt.Println(<span class="string">"End!"</span>)</span><br><span class="line"><span class="keyword">break</span> Loop</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"Received:%v\n"</span>, e1)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">syncChan &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">&#125;()</span><br><span class="line">&lt;-syncChan</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> golang </category>
          
          <category> channel </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>time包</title>
      <link href="/2018/08/18/time%E5%8C%85/"/>
      <url>/2018/08/18/time%E5%8C%85/</url>
      <content type="html"><![CDATA[<a id="more"></a><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">timer := time.NewTimer(<span class="number">2</span> * time.Second)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"Present time:%v.\n"</span>, time.Now())</span><br><span class="line"><span class="comment">//当定时器到期，会发送时间到通道C</span></span><br><span class="line">expirationTime := &lt;-timer.C</span><br><span class="line">fmt.Printf(<span class="string">"Expiration time:%v.\n"</span>, expirationTime)</span><br><span class="line"><span class="comment">//timer.Stop表示停止定时器，如果定时器过期或者已经停止了，就返回false，否则true</span></span><br><span class="line">fmt.Printf(<span class="string">"Stop Timer:%v.\n"</span>, timer.Stop())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> golang </category>
          
          <category> channel </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>select语句</title>
      <link href="/2018/08/18/select%E8%AF%AD%E5%8F%A5/"/>
      <url>/2018/08/18/select%E8%AF%AD%E5%8F%A5/</url>
      <content type="html"><![CDATA[<a id="more"></a><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// select只能用于通道的发送和接收操作</span></span><br><span class="line"><span class="comment">// 1.在关键字case右边的发送语句或者接收语句中的表达式会先求值</span></span><br><span class="line"><span class="comment">// 2.这里的intChan1和intChan2未初始化，所以传送数据时会阻塞</span></span><br><span class="line"><span class="comment">// 3.如果有多个case满足条件，那么运行时系统会随机选择一个</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> intChan1 = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> intChan2 = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">var</span> channels = []<span class="keyword">chan</span> <span class="keyword">int</span>&#123;intChan1, intChan2&#125;</span><br><span class="line"><span class="keyword">var</span> numbers = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> getChan(<span class="number">0</span>) &lt;- getNumber(<span class="number">2</span>):</span><br><span class="line">fmt.Println(<span class="string">"1th case is selected"</span>)</span><br><span class="line"><span class="keyword">case</span> getChan(<span class="number">1</span>) &lt;- getNumber(<span class="number">3</span>):</span><br><span class="line">fmt.Println(<span class="string">"2st case is selected"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">"Default!"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getNumber</span><span class="params">(i <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"numbers[%d]\n"</span>, i)</span><br><span class="line"><span class="keyword">return</span> numbers[i]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getChan</span><span class="params">(i <span class="keyword">int</span>)</span> <span class="title">chan</span> <span class="title">int</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"channels[%d]\n"</span>, i)</span><br><span class="line"><span class="keyword">return</span> channels[i]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*结果：</span></span><br><span class="line"><span class="comment">channels[0]</span></span><br><span class="line"><span class="comment">numbers[0]</span></span><br><span class="line"><span class="comment">channels[1]</span></span><br><span class="line"><span class="comment">numbers[1]</span></span><br><span class="line"><span class="comment">Default!</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> golang </category>
          
          <category> channel </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>关系数据库原理</title>
      <link href="/2018/08/18/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86/"/>
      <url>/2018/08/18/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<a id="more"></a><h1 id="一、数据库基本知识"><a href="#一、数据库基本知识" class="headerlink" title="一、数据库基本知识"></a>一、数据库基本知识</h1><p>一个好的哈希表：$O(1)$<br>一个均衡的树：$O(log(n))$<br>一个好的排序算法：$O(n*log(n))$<br>一个差的排序算法：$O(n^2)$</p><h3 id="1、排序"><a href="#1、排序" class="headerlink" title="1、排序"></a>1、排序</h3><p>合并排序：时间复杂度$O(n*log(n))$</p><h3 id="2、存储"><a href="#2、存储" class="headerlink" title="2、存储"></a>2、存储</h3><p>数据库的表使用的是<code>二维阵列</code>存储：必须一下子全部加载到内存中。<br>数据库使用<code>哈希表</code>来存储<code>锁表</code>和<code>缓冲池</code>：可以先加载一半到内存中。</p><h3 id="3、查找"><a href="#3、查找" class="headerlink" title="3、查找"></a>3、查找</h3><p><span style="border-bottom:2px solid red;">查找特定的值：二叉查找树</span><br>    比如说你要查找40，时间复杂度O(log(N))</p><p><img src="\images\binary_search_tree.png" alt="二叉查找树"></p><p><span style="border-bottom:2px solid red;">范围查找：B+树</span><br>    比如你要查找40~100之间的值，只需要找到40，通过后续节点找到100，时间复杂度O(M+log(N))</p><p><img src="\images\b+_tree.png" alt="B+树"></p><ul><li>只有最底层的叶子才保存行信息</li><li>底层节点是连续的</li><li>尽量降低B+树的层数（表的索引），不然时间复杂度会变成$O(n)$</li><li>当数据库进行删除插入操作时，需要自动更新B+索引树，所以创建太多索引影响性能</li></ul><h1 id="二、数据库全局概览"><a href="#二、数据库全局概览" class="headerlink" title="二、数据库全局概览"></a>二、数据库全局概览</h1><p><span style="border-bottom:2px solid red;">核心组件</span></p><ul><li>Process Manager：</li><li>Network Manager：</li><li>Memory Manager：</li><li>Client Manager：</li><li>File system Manager：</li><li>Security Manager：对用户的验证和授权</li></ul><p><span style="border-bottom:2px solid red;">工具</span></p><ul><li>Backup Manager：</li><li>Recovery Manager：崩溃后重启数据库到一致状态</li><li>Monitor Manager：记录数据库活动信息</li><li>Administration Manager：管理数据库、模式、表空间</li></ul><p><span style="border-bottom:2px solid red;">查询管理器</span></p><ul><li>Query executor：编译和执行查询</li><li>Query parser：检查查询是否合法</li><li>Query rewriter：预优化查询</li><li>Query optimizer：优化查询</li></ul><p><span style="border-bottom:2px solid red;">数据管理器</span></p><ul><li>Transaction Manager：处理事务</li><li>Cache Manager：</li><li>Data access Manager：访问磁盘中的数据</li></ul><h1 id="三、查询过程"><a href="#三、查询过程" class="headerlink" title="三、查询过程"></a>三、查询过程</h1><h2 id="1、客户端管理器："><a href="#1、客户端管理器：" class="headerlink" title="1、客户端管理器："></a>1、客户端管理器：</h2><p>当你连接数据库时：</p><ol><li>客户端管理器检查你的<strong>验证信息</strong>，检查你是否具有<strong>访问权限</strong>。</li><li>客户端管理器检查是否有空闲的进程或线程处理你的查询。</li><li>客户端管理器检查数据库是否负载很重。</li><li>如果客户端管理器等待超时还获取不到资源，会关闭连接。</li><li>客户端管理器会把查询给查询管理器处理。</li><li>查询处理进程从查询管理器获取数据后，会将部分结果保存至缓存并且给你发送</li></ol><h2 id="2、查询管理器："><a href="#2、查询管理器：" class="headerlink" title="2、查询管理器："></a>2、查询管理器：</h2><ol><li>查询被解析并判断是否合法</li><li>重写——去除无用的操作加入预优化部分</li><li>优化提升性能，转换为可执行代码和数据查询计划</li><li>计划被编译</li><li>执行</li></ol><h3 id="第一步：查询解析器"><a href="#第一步：查询解析器" class="headerlink" title="第一步：查询解析器"></a>第一步：查询解析器</h3><ol><li>语法是否有误</li><li>关键字使用的顺序</li><li>根据数据库的元数据检查<strong>表是否存在</strong>,表的<strong>字段是否存在</strong></li><li>对类型的使用是否可行</li><li>是否具有<strong>权限</strong>来读写表</li></ol><h3 id="第二步：查询重写器"><a href="#第二步：查询重写器" class="headerlink" title="第二步：查询重写器"></a>第二步：查询重写器</h3><ol><li>预优化查询,避免不必要的运算</li><li>根据一些规则寻找优化解决方案   <ul><li><strong>视图合并</strong>:把查询中的试图转换为SQL代码</li><li><strong>子查询扁平化</strong>:尝试移除子查询(因为子查询难以优化)</li><li><strong>去除不必要的运算符</strong>:比如你用了<code>DISTINCT</code>和<code>UNIQUE</code>,那么<code>DISTINCT</code>就会被去掉.</li><li>消除冗余的连接</li><li><strong>常数计算赋值</strong>:比如 WHERE age &gt; 10 + 2 ,会转换为 WHERE age &lt; 12</li><li><strong>分区裁剪</strong>:如果你用了分区表,重写器能够找到需要使用的分区</li><li><strong>物化试图重写</strong>:如果有物化试图正好匹配查询谓词的一个子集,那么修改查询使用物化试图而不是原始表.</li><li><strong>自定义规则</strong>:如果你有自定义规则和修改查询,重写器就会执行这些规则</li><li><strong>OLAP转换</strong></li></ul></li></ol><p>例如:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> PERSON.*</span><br><span class="line"><span class="keyword">FROM</span> PERSON</span><br><span class="line"><span class="keyword">WHERE</span> PERSON.person_key <span class="keyword">IN</span></span><br><span class="line">(<span class="keyword">SELECT</span> MAILS.person_key</span><br><span class="line"><span class="keyword">FROM</span> MAILS</span><br><span class="line"><span class="keyword">WHERE</span> MAILS.mail <span class="keyword">LIKE</span> <span class="string">'christophe%'</span>);</span><br></pre></td></tr></table></figure><p>会转换为:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> PERSON.*</span><br><span class="line"><span class="keyword">FROM</span> PERSON, MAILS</span><br><span class="line"><span class="keyword">WHERE</span> PERSON.person_key = MAILS.person_key</span><br><span class="line"><span class="keyword">and</span> MAILS.mail <span class="keyword">LIKE</span> <span class="string">'christophe%'</span>;</span><br></pre></td></tr></table></figure><h3 id="第三步：统计"><a href="#第三步：统计" class="headerlink" title="第三步：统计"></a>第三步：统计</h3><p>当你统计信息时,数据库会计算:</p><ul><li>表中行和列的数量</li><li>表中列的唯一值,数据长度,数据范围</li><li>表的索引</li></ul><p>统计的信息对于查询优化器做优化特别重要,所以统计必须要及时更新.</p><h3 id="第四步：查询优化器"><a href="#第四步：查询优化器" class="headerlink" title="第四步：查询优化器"></a>第四步：查询优化器</h3><h4 id="获取数据的方法："><a href="#获取数据的方法：" class="headerlink" title="获取数据的方法："></a>获取数据的方法：</h4><ul><li>全扫描：完整的读取一个表或索引</li><li>范围扫描：使用B+树只是读取索引的一部分</li><li>唯一扫描：二叉查找树就是查找唯一值的</li></ul><h4 id="联接运算符（获取数据后那么就要连接了）"><a href="#联接运算符（获取数据后那么就要连接了）" class="headerlink" title="联接运算符（获取数据后那么就要连接了）"></a>联接运算符（获取数据后那么就要连接了）</h4><p>大多数情况下，“A Join B” 和 “B Join A”的成本是不同的</p><hr><p><span style="border-bottom:2px solid red;">合并联接</span>：（a、b中挑选相同的元素）</p><p>如果两个关系都已经排序，时间复杂度：$O(N+M)$<br>如果两个关系都未排序，时间复杂度：$O(N<em>log(N)+M</em>log(M))$</p><hr><p><span style="border-bottom:2px solid red;">哈希联接</span>：</p><p>如果是个好的哈希函数，时间复杂度：$O(N+M)$</p><hr><p><span style="border-bottom:2px solid red;">嵌套循环联接</span>：</p><ul><li>针对外关系的每一行，查看内关系里所有的行来寻找匹配的行。时间复杂度为$O(N^2)$。</li><li>将两个关系<code>成簇的读取</code>对磁盘I/O有利，但时间复杂度没变。</li><li>如果内关系足够小，那么时间复杂度最好能到：$O(N)$</li></ul><hr><h4 id="执行联接的顺序的算法"><a href="#执行联接的顺序的算法" class="headerlink" title="执行联接的顺序的算法"></a>执行联接的顺序的算法</h4><p><span style="border-bottom:2px solid red;">动态规划</span>：</p><ul><li>省掉一些相似的做法，比如（A Join B）是重复的。</li></ul><p><span style="border-bottom:2px solid red;">启发式</span>：</p><ul><li>如果一个表有针对指定谓词的索引，那么就不要对表进行合并联接，对索引</li><li>增加一些规则，比如<code>联接运算要先于其他关系运算</code></li></ul><p><span style="border-bottom:2px solid red;">贪婪法</span>：</p><ul><li>先从要联接的表中选出一张表（A）</li><li>计算每一个与（A）的联接，如果（A Join B）成本最低</li><li>计算每一个与（A Join B）的结果成本最低的表</li><li>…</li><li>可以结合多个贪婪选项得出比较满意的答案</li></ul><h4 id="真实的优化器"><a href="#真实的优化器" class="headerlink" title="真实的优化器"></a>真实的优化器</h4><p><span style="border-bottom:2px solid red;">SQLite</span></p><ul><li>在有 CROSS JOIN（两个表的笛卡尔乘积）时从不给表重新排序</li><li>使用嵌套联接</li><li>3.8.0版本使用<code>最近邻居</code>的贪婪算法作为最佳查询计划</li><li>…</li></ul><h3 id="第五步、查询执行器"><a href="#第五步、查询执行器" class="headerlink" title="第五步、查询执行器"></a>第五步、查询执行器</h3><blockquote><p>这时我们有了一个优化了的执行代码，编译为可执行代码，如果计算机的硬件符合要求，就会执行。但是查询执行器不会直接从文件系统拿数据，而是向<code>缓存管理器</code>要。</p></blockquote><h2 id="4、数据管理器"><a href="#4、数据管理器" class="headerlink" title="4、数据管理器"></a>4、数据管理器</h2><h3 id="缓存管理器：与查询执行器进行数据的交互"><a href="#缓存管理器：与查询执行器进行数据的交互" class="headerlink" title="缓存管理器：与查询执行器进行数据的交互"></a>缓存管理器：与查询执行器进行数据的交互</h3><ul><li>因为磁盘I/O的瓶颈，缓存管理器有一个内存缓冲区（缓冲池）：从内存读取数据提供性能</li><li>缓存管理器需要在查询执行器使用数据之前<code>预读</code>数据</li><li>使用<code>缓冲区命中率</code>来度量预读的效率</li><li>缓冲容量有限，必须频繁加载移除，用<code>缓冲区置换策略</code>来解决</li></ul><p><span style="border-bottom:2px solid red;">预读</span></p><blockquote><p>当查询执行器处理它的第一批数据时，会告诉缓存管理器预先装载第二批数据，当开始处理第二批数据时，告诉缓存管理器预先装载第三批数据，并且告诉缓存管理器第一批可以从缓存里清掉。</p></blockquote><ul><li>推测预读法：查询执行器想要（1，3，5）数据，推测其也许需要（7，9，11）</li><li>顺序预读法：只是简单的加载下一批连续的数据</li></ul><p><span style="border-bottom:2px solid red;">缓冲/缓存命中率</span></p><blockquote><p>显示请求的数据在缓存中找到而不是从磁盘读取的频率</p></blockquote><p><span style="border-bottom:2px solid red;">缓冲区置换策略</span></p><blockquote><p>因为内存大小有限，必须移除旧的数据，一般使用LRU（最近最少使用）算法</p></blockquote><h4 id="写缓冲区"><a href="#写缓冲区" class="headerlink" title="写缓冲区"></a>写缓冲区</h4><blockquote><p>预先加载数据、成批刷入磁盘都可以提升写缓冲区的速度。缓冲区最小的数据单位是<code>页</code>，不是行。如果缓冲区的页修改了但是没有写入磁盘，就是<code>脏页</code>。</p></blockquote><h2 id="5、事务管理器"><a href="#5、事务管理器" class="headerlink" title="5、事务管理器"></a>5、事务管理器</h2><p><span style="border-bottom:2px solid red;">一个事务就是一个工作单元</span></p><ul><li>原子性（Atomicity）：要么全完成，要么全部取消。</li><li>隔离性（Isolation）：如果A，B事务同时运行，最终结果都是相同的，不管谁先结束。</li><li>持久性（Durability）：一旦事务提交（成功运行），不管发生什么，数据要保存在数据库中。</li><li>一致性（Consistency）：只有合法的数据才能写入数据库。</li></ul><p><span style="border-bottom:2px solid red;">4个隔离级别</span></p><ul><li>串行化（Serializable，SQLite默认模式）：最高级别，两个事务100%隔离</li><li>可重复读（Repeatable read，MySQL默认模式）：每个事务都有自己的世界，只是在<code>新数据方面突破隔离，在旧数据仍然隔离</code>。比如事务A运行（select count(1) from table），事务B这时在table表中添加了一条新的数据，那么事务A再运行一次得到的结果是不一样的——幻读</li><li>读取已提交（Oracle，PostgreSQL，SQL Server默认模式）：如果事务A读取数据D，这时事务B删除或修改数据D并提交，那么事务A再次读数据D时数据的变化是可见的——不可重复读</li><li>读取未提交：最低级别，如果事务A读取数据D，事务B修改或删除数据D（并未提交，事务B还在运行），那么事务A读取数据D时数据的变化是可见的。如果事务B回滚，那么事务A中读取的数据D是无意义的——<code>脏读</code>。</li></ul><h1 id="四、数据库的并发控制"><a href="#四、数据库的并发控制" class="headerlink" title="四、数据库的并发控制"></a>四、数据库的并发控制</h1><h2 id="1、锁管理器"><a href="#1、锁管理器" class="headerlink" title="1、锁管理器"></a>1、锁管理器</h2><blockquote><p>锁管理器是添加和释放锁的进程，用一个哈希表来保存锁信息（关键字是被锁的数据）</p></blockquote><p><span style="border-bottom:2px solid red;">排他锁原理</span></p><blockquote><p>如果事务A需要一条数据，就把他锁住，如果事务B也需要这个数据，必须等待事务A释放数据。</p></blockquote><p><span style="border-bottom:2px solid red;">共享锁原理</span></p><ol><li>事务A需要【读取】数据 X，它会给数据 X 加上【共享锁】并读取</li><li>事务B也需要【读取】数据 X，它会给数据 X 加上【共享锁】并读取</li><li>事务C要【修改】数据 X，它会给数据 X 加上【排他锁】，但是必须等待事务A，B释放【共享锁】</li></ol><p><span style="border-bottom:2px solid red;">两段锁原理</span></p><ul><li>将事务分为两个阶段：</li><li>成长阶段：事务可以获得锁，但不能释放锁</li><li>收缩阶段：事务可以释放锁（对于已经处理完而且不会再次处理的数据），但不能获得新锁</li></ul><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><ul><li><code>超时设定</code>，如果一个锁再该时间内没有加上，那么就判断事务产生死锁——简单</li><li>检查哈希表中是否有循环——代价很昂贵</li><li>在加锁之前检查该锁是否会死锁——代价也很昂贵</li></ul><h2 id="2、版本控制"><a href="#2、版本控制" class="headerlink" title="2、版本控制"></a>2、版本控制</h2><ul><li>每个事务可以同时修改【相同的】数据</li><li>每个事务有自己的数据拷贝（版本）</li><li>如果两个事务同时修改相同的数据，只接受一个修改，另一个将回滚或者重新运行</li><li>读写事务不会相互阻塞</li><li>没有锁管理器带来额外开销</li><li>但是磁盘空间的消耗会很大</li></ul><h1 id="五、数据库的日志管理"><a href="#五、数据库的日志管理" class="headerlink" title="五、数据库的日志管理"></a>五、数据库的日志管理</h1><p>为了保证事务的持久性和原子性，有两个解决方法：</p><ol><li>副本：事务创建自己的副本，基于副本工作，如果失败，就删除副本；如果成功，就提交副本</li><li>事务日志：在每次写入磁盘之前，在事务日志中写入信息，这样崩溃了也能知道该怎么办</li></ol><h2 id="WAL"><a href="#WAL" class="headerlink" title="WAL"></a>WAL</h2><p>大多数数据库使用<code>预写日志协议</code>（Write-Ahead Logging protocol，WAL）来处理事务日志。</p><ol><li>每个对数据库的修改都产生一条<code>日志记录</code>，在数据写入磁盘前都必须把<code>日志记录</code>写入事务日志。</li><li>日志记录必须按顺序写入</li><li>事务提交成功之前，必须把事务的提交顺序写入事务日志</li></ol><h2 id="ARIES"><a href="#ARIES" class="headerlink" title="ARIES"></a>ARIES</h2><p>比WAL在写日志时能保持良好的性能，快速可靠的数据恢复。</p><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><p>日志的组成：磁盘上保存数据的每个页都记录着最后修改该数据的LSN</p><ul><li>LSN：日志序列号（Log Sequence Num），这是按时间顺序分配的</li><li>TransID：产生操作事务的ID</li><li>PagelD：被修改的数据在磁盘上页的位置</li><li>PrevLSN：同一个事务产生的上一条日志的链接</li><li>UNDO：取消本次操作的方法，回到原来状态的反向操作</li><li>REDO：重复本次操作</li></ul><h3 id="日志缓冲区"><a href="#日志缓冲区" class="headerlink" title="日志缓冲区"></a>日志缓冲区</h3><p>当查询执行器要求做一次修改：</p><ol><li>缓存管理器将修改存入自己的缓存</li><li>日志管理器将相关日志存入自己的日志缓冲区</li><li>查询执行器认为操作已经完成</li><li>日志管理器将日志写入事务日志</li><li>缓存管理器将修改写入磁盘</li></ol><h3 id="STEAL-和-FORCE-策略"><a href="#STEAL-和-FORCE-策略" class="headerlink" title="STEAL 和 FORCE 策略"></a>STEAL 和 FORCE 策略</h3><ul><li>NO-FORCE策略——如果第5步在事务提交之后完成，一旦发生崩溃，可以使用<code>REDO</code>恢复事务</li><li>FORCE策略——第5步在事务提交之前必须完成。</li><li>STEAL策略——数据是一步步的写入磁盘</li><li>NO-STEAL策略——缓冲区管理器等待提交命令然后一次性写入磁盘</li></ul><p><span style="border-bottom:2px solid red;">大部分的数据库都选择<strong>No-Force/Steal</strong>策略，性能最好。</span></p><h2 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h2><p>如果事务被【手动】取消，或者被所管理器取消（取消死锁），或者因为网路故障取消，那么就不需要进行分析阶段，因为哪些需要Redo，哪些需要Undo的信息保存在2个内存表中：</p><ul><li>事务表：保存当前所有事务状态</li><li>脏页表：保存哪些数据需要写入磁盘</li></ul><h4 id="1、分析阶段"><a href="#1、分析阶段" class="headerlink" title="1、分析阶段"></a>1、分析阶段</h4><blockquote><p>恢复进程读取全部的事务日志，来重建崩溃中发生的时间线（生成2张表），决定哪些事务回滚（未提交的事务都需回滚）、崩溃时哪些数据需要写盘。</p></blockquote><p><span style="border-bottom:2px solid red;">检查点</span>：</p><blockquote><p>为了加快分析阶段，使用检查点技术，不时的把2张表的内容和最后一条LSN写入磁盘，那么在分析阶段中，只要分析这个LSN之后的日志就可以了。</p></blockquote><h4 id="2、Redo阶段"><a href="#2、Redo阶段" class="headerlink" title="2、Redo阶段"></a>2、Redo阶段</h4><ul><li>Redo按日志的时间顺序（LSN）进行处理</li><li>如果LSN（磁盘页）&gt;= LSN（日志记录），说明数据在崩溃前写入磁盘，所以不需要做什么</li><li>如果LSN（磁盘页）&lt; LSN（日志记录），磁盘上的页将要被更新</li></ul><h4 id="3、Undo阶段"><a href="#3、Undo阶段" class="headerlink" title="3、Undo阶段"></a>3、Undo阶段</h4><p>从每个事务的最后一条日志开始回滚所有崩溃时未完成的事务。</p><h1 id="六、数据库的数据存储"><a href="#六、数据库的数据存储" class="headerlink" title="六、数据库的数据存储"></a>六、数据库的数据存储</h1><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>数据类型分为：定长<code>char(20)</code>和变长<code>varchar(20)</code>，除非最长和最短相差太多，否则还是使用定长比较好。</p><h3 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h3><blockquote><p>一个数据块中能存储的记录（行）分为：变长记录和定长记录。每个记录中都包含各自的<code>RID</code>。</p><blockquote><p>无序记录的文件被称为<code>堆文件</code>，有序的文件通常需要结合<code>聚簇索引</code>（将数据直接存储在数据库块的索引上）来排序。</p></blockquote></blockquote><h3 id="文件组织"><a href="#文件组织" class="headerlink" title="文件组织"></a>文件组织</h3><p>顺序文件组织：能根据索引来检索文件<br>散列文件组织：hash索引</p><h3 id="数据库存储的文件"><a href="#数据库存储的文件" class="headerlink" title="数据库存储的文件"></a>数据库存储的文件</h3><ul><li>数据文件</li><li>索引文件</li><li>日志文件</li></ul><h3 id="MySQL的数据字典"><a href="#MySQL的数据字典" class="headerlink" title="MySQL的数据字典"></a>MySQL的数据字典</h3><ul><li>mysql：保存数据库的元数据的</li><li>information_schema：统计数据</li><li>performance_schema：显示性能信息</li></ul><blockquote><p>本文转载于<a href="http://blog.jobbole.com/100349/" target="_blank" rel="noopener">数据库原理</a></p></blockquote>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>dependency_injection</title>
      <link href="/2018/08/18/dependency-injection/"/>
      <url>/2018/08/18/dependency-injection/</url>
      <content type="html"><![CDATA[<a id="more"></a><h1 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h1><h3 id="1-依赖"><a href="#1-依赖" class="headerlink" title="1. 依赖"></a>1. 依赖</h3><p>如果在 Class A 中，有 Class B 的实例，则称 Class A 对 Class B 有一个依赖。例如下面类 Human 中用到一个 Father 对象，我们就说类 Human 对类 Father 有一个依赖。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    Father father;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Human</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        father = <span class="keyword">new</span> Father();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>仔细看这段代码我们会发现存在一些问题：<br>(1). 如果现在要改变 father 生成方式，如需要用<code>new Father(String name)</code>初始化 father，需要修改 Human 代码；<br>(2). 如果想测试不同 Father 对象对 Human 的影响很困难，因为 father 的初始化被写死在了 Human 的构造函数中；<br>(3). 如果<code>new Father()</code>过程非常缓慢，单测时我们希望用已经初始化好的 father 对象 Mock 掉这个过程也很困难。  </p><h3 id="2-依赖注入"><a href="#2-依赖注入" class="headerlink" title="2. 依赖注入"></a>2. 依赖注入</h3><p>上面将依赖在构造函数中直接初始化是一种 Hard init 方式，弊端在于两个类不够独立，不方便测试。我们还有另外一种 Init 方式，如下：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    Father father;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Human</span><span class="params">(Father father)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.father = father;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，我们将 father 对象作为构造函数的一个参数传入。在调用 Human 的构造方法之前外部就已经初始化好了 Father 对象。<strong>像这种非自己主动初始化依赖，而通过外部来传入依赖的方式，我们就称为依赖注入。</strong><br>现在我们发现上面 1 中存在的两个问题都很好解决了，简单的说依赖注入主要有两个好处：<br>(1). 解耦，将依赖之间解耦。<br>(2). 因为已经解耦，所以方便做单元测试，尤其是 Mock 测试。</p>]]></content>
      
      <categories>
          
          <category> golang </category>
          
          <category> 依赖注入 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>旋转字符串</title>
      <link href="/2018/08/10/%E6%97%8B%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2018/08/10/%E6%97%8B%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      <content type="html"><![CDATA[<a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给出字符串abcdefg，旋转2，变成cdefgab </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//法一：暴力移位法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">leftShiftOne</span><span class="params">(<span class="built_in">string</span> &amp;str)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = str.length();</span><br><span class="line"><span class="keyword">if</span>(n&lt;<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> t = str[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">str[i<span class="number">-1</span>]=str[i];</span><br><span class="line">&#125;</span><br><span class="line">str[n<span class="number">-1</span>]=t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate_1</span><span class="params">(<span class="built_in">string</span> &amp;str,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line">leftShiftOne(str);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//法二：三步转换法 </span></span><br><span class="line"><span class="comment">//ab-&gt;ba</span></span><br><span class="line"><span class="comment">//cdefg-&gt;gfedc</span></span><br><span class="line"><span class="comment">//bagfedc-&gt;cdefgab </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reserveString</span><span class="params">(<span class="built_in">string</span> &amp;str,<span class="keyword">int</span> from,<span class="keyword">int</span> to)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(from &lt; to)&#123;</span><br><span class="line"><span class="keyword">char</span> t = str[from];</span><br><span class="line">str[from]=str[to];</span><br><span class="line">str[to]=t;</span><br><span class="line">from++;</span><br><span class="line">to--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate_2</span><span class="params">(<span class="built_in">string</span> &amp;str,<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">m %= n;</span><br><span class="line">reserveString(str,<span class="number">0</span>,m<span class="number">-1</span>);</span><br><span class="line">reserveString(str,m,n<span class="number">-1</span>);</span><br><span class="line">reserveString(str,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">string</span> s =<span class="string">"abcdef"</span>;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">7</span>;</span><br><span class="line">rotate_2(s,num,s.size());</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 算法与数据结构 </category>
          
          <category> c++ </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>发送邮件</title>
      <link href="/2018/08/09/%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"/>
      <url>/2018/08/09/%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</url>
      <content type="html"><![CDATA[<a id="more"></a><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">auth:=smtp.PlainAuth(<span class="string">""</span>,<span class="string">"example1@qq.com"</span>,<span class="string">"密码"</span>,<span class="string">"smtp.qq.com"</span>)</span><br><span class="line">to:=[]<span class="keyword">string</span>&#123;<span class="string">"example2@qq.com"</span>&#125;</span><br><span class="line">nickname:=<span class="string">"test"</span></span><br><span class="line">subject:=<span class="string">"test mail"</span></span><br><span class="line">content_type:=<span class="string">"Content-type: text/plain;charset=UTF-8"</span></span><br><span class="line">body:=<span class="string">"This is email body!"</span></span><br><span class="line">from:=<span class="string">"example1@qq.com"</span></span><br><span class="line">msg:=[]<span class="keyword">byte</span>(<span class="string">"To:"</span>+strings.Join(to,<span class="string">","</span>)+<span class="string">"\r\nFrom"</span>+nickname+<span class="string">"&lt;"</span>+from+<span class="string">"&gt;\r\nSubject:"</span>+subject+<span class="string">"\r\n"</span>+content_type+<span class="string">"\r\n\r\n"</span>+body)</span><br><span class="line">err:=smtp.SendMail(<span class="string">"smtp.qq.com:25"</span>,auth,from,to,msg)</span><br><span class="line"><span class="keyword">if</span> err!=<span class="literal">nil</span>&#123;</span><br><span class="line">fmt.Printf(<span class="string">"send email error:%v"</span>,err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> golang </category>
          
          <category> 应用 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>unsafe包</title>
      <link href="/2018/07/10/unsafe/"/>
      <url>/2018/07/10/unsafe/</url>
      <content type="html"><![CDATA[<a id="more"></a><h3 id="Pointer"><a href="#Pointer" class="headerlink" title="Pointer"></a>Pointer</h3><p><code>unsafe.Pointer</code>的4个规则：</p><ul><li>任何指针都可以转换为<code>unsafe.Pointer</code>类型</li><li><code>unsafe.Pointer</code>类型可以转换为任何指针</li><li><code>uintptr</code>类型可以转换为<code>unsafe.Pointer</code>类型</li><li><code>unsafe.Pointer</code>类型可以转换为<code>uintptr</code>类型</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    i:= <span class="number">10</span></span><br><span class="line">    fi:=(*<span class="keyword">float64</span>)(unsafe.Pointer(&amp;i))</span><br><span class="line">    *fi = *fi * <span class="number">3</span></span><br><span class="line">    fmt.Println(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>指针变量<code>*T</code>是不能计算偏移量的，但是<code>uintptr</code>可以，我们将指针转换为<code>uintptr</code>，进行偏移计算，这样就能访问特定内存了，达到对不同内存读写的目的。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    u:=<span class="built_in">new</span>(user)</span><br><span class="line">    pName := (*<span class="keyword">string</span>)(unsafe.Pointer(u))</span><br><span class="line">    *pName = <span class="string">"张三"</span></span><br><span class="line">    temp:=<span class="keyword">uintptr</span>(unsafe.Pointer(u))+unsafe.Offsetof(u.age)</span><br><span class="line">    pAge:=(*<span class="keyword">int</span>)(unsafe.Pointer(temp))</span><br><span class="line">    *pAge = <span class="number">20</span></span><br><span class="line">    fmt.Println(*u)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>pName</code>因为是第一个字段，所以不需要偏移，<code>pAge</code>设置偏移后获取到该字段的内存地址。</p><hr><p>当一个变量被移动，所有的保存改变量旧地址的指针必须同时被更新为变量移动后的新地址。从垃圾收集器的视角来看，一个unsafe.Pointer是一个指向变量的指针，因此当变量被移动是对应的指针也必须被更新；但是uintptr类型的临时变量只是一个普通的数字，所以其值不应该被改变。上面错误的代码因为引入一个非指针的临时变量tmp，导致垃圾收集器无法正确识别这个是一个指向变量x的指针。当第二个语句执行时，变量x可能已经被转移，这时候临时变量tmp也就不再是现在的&amp;x.b地址。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">temp:=<span class="keyword">uintptr</span>(unsafe.Pointer(u))+unsafe.Offsetof(u.age)</span><br><span class="line">pAge:=(*<span class="keyword">int</span>)(unsafe.Pointer(temp))</span><br><span class="line">*pAge = <span class="number">20</span></span><br></pre></td></tr></table></figure></p><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"unsafe"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">age <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">u:=<span class="built_in">new</span>(user)</span><br><span class="line">u.name = <span class="string">"张三"</span></span><br><span class="line">pAge:=(*<span class="keyword">int</span>)(unsafe.Pointer(<span class="keyword">uintptr</span>(unsafe.Pointer(u))+unsafe.Offsetof(u.age)))</span><br><span class="line">*pAge = *pAge + <span class="number">20</span></span><br><span class="line">fmt.Println(*u)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> golang </category>
          
          <category> package </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>狄克斯特拉算法</title>
      <link href="/2018/06/01/%E7%8B%84%E5%85%8B%E6%96%AF%E7%89%B9%E6%8B%89%E7%AE%97%E6%B3%95/"/>
      <url>/2018/06/01/%E7%8B%84%E5%85%8B%E6%96%AF%E7%89%B9%E6%8B%89%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<a id="more"></a><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> processed []<span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">graph:=<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;</span><br><span class="line"><span class="string">"start"</span>:&#123;</span><br><span class="line"><span class="string">"a"</span>:<span class="number">6</span>,</span><br><span class="line"><span class="string">"b"</span>:<span class="number">2</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"a"</span>:&#123;</span><br><span class="line"><span class="string">"终点"</span>:<span class="number">1</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"b"</span>:&#123;</span><br><span class="line"><span class="string">"a"</span>:<span class="number">3</span>,</span><br><span class="line"><span class="string">"终点"</span>:<span class="number">5</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">costs:=<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;</span><br><span class="line"><span class="string">"a"</span>:<span class="number">6</span>,</span><br><span class="line"><span class="string">"b"</span>:<span class="number">2</span>,</span><br><span class="line"><span class="string">"终点"</span>:<span class="number">1</span>&lt;&lt;<span class="number">31</span><span class="number">-1</span>,</span><br><span class="line">&#125;</span><br><span class="line">parents:=<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">"a"</span>:<span class="string">"起点"</span>,</span><br><span class="line"><span class="string">"b"</span>:<span class="string">"起点"</span>,</span><br><span class="line"><span class="string">"终点"</span>:<span class="string">""</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>&#123;</span><br><span class="line">node:=find_lowest_cost_node(costs)</span><br><span class="line"><span class="keyword">if</span> node==<span class="string">""</span>&#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">cost:=costs[node]</span><br><span class="line">neighbors:=graph[node]</span><br><span class="line"><span class="keyword">for</span> n := <span class="keyword">range</span> neighbors&#123;</span><br><span class="line">new_cost:=cost+neighbors[n]</span><br><span class="line"><span class="keyword">if</span> costs[n]&gt;new_cost&#123;</span><br><span class="line">costs[n]=new_cost</span><br><span class="line">parents[n]=node</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">processed=<span class="built_in">append</span>(processed,node)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"graph:"</span>,graph)</span><br><span class="line">fmt.Println(<span class="string">"costs:"</span>,costs)</span><br><span class="line">fmt.Println(<span class="string">"parents:"</span>,parents)</span><br><span class="line">fmt.Println(<span class="string">"processed:"</span>,processed)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">find_lowest_cost_node</span><span class="params">(costs <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> lowest_cost <span class="keyword">int</span>=<span class="number">1</span>&lt;&lt;<span class="number">31</span><span class="number">-1</span></span><br><span class="line"><span class="keyword">var</span> lowest_cost_node <span class="keyword">string</span></span><br><span class="line"><span class="keyword">for</span> node:=<span class="keyword">range</span> costs&#123;</span><br><span class="line">cost:=costs[node]</span><br><span class="line"><span class="keyword">if</span> cost&lt;lowest_cost &amp;&amp; find_not_in_slice(node)&#123;</span><br><span class="line">lowest_cost = cost</span><br><span class="line">lowest_cost_node = node</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> lowest_cost_node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">find_not_in_slice</span><span class="params">(node <span class="keyword">string</span>)</span><span class="title">bool</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> _,v:=<span class="keyword">range</span> processed&#123;</span><br><span class="line"><span class="keyword">if</span> v==node&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 算法与数据结构 </category>
          
          <category> golang </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>温柔的人</title>
      <link href="/2018/05/27/%E6%B8%A9%E6%9F%94%E7%9A%84%E4%BA%BA/"/>
      <url>/2018/05/27/%E6%B8%A9%E6%9F%94%E7%9A%84%E4%BA%BA/</url>
      <content type="html"><![CDATA[<a id="more"></a><ul><li><a href="https://www.bilibili.com/bangumi/play/ss1699/?from=search&amp;seid=2826238494142229813" target="_blank" rel="noopener">四月是你的谎言</a></li><li><a href="https://www.bilibili.com/bangumi/play/ss173/?from=search&amp;seid=18135097600024502508" target="_blank" rel="noopener">一周的朋友</a></li><li><a href="https://www.bilibili.com/bangumi/play/ss857/?from=search&amp;seid=9659429609644661484" target="_blank" rel="noopener">好想告诉你</a></li><li><a href="https://www.bilibili.com/bangumi/play/ss687/?from=search&amp;seid=10532690056145324955" target="_blank" rel="noopener">樱花庄的宠物女孩</a></li><li><a href="https://www.bilibili.com/bangumi/play/ss441/?from=search&amp;seid=6970826844296742980" target="_blank" rel="noopener">来自风平浪静的明天</a></li><li><a href="https://www.bilibili.com/bangumi/play/ss4155/?from=search&amp;seid=14001513337380785036" target="_blank" rel="noopener">玉子爱情故事</a></li><li><a href="https://www.bilibili.com/bangumi/play/ss23850/?from=search&amp;seid=11911092656866222768" target="_blank" rel="noopener">超能力女儿</a></li><li>[散华礼弥]</li></ul>]]></content>
      
      <categories>
          
          <category> 网站资源 </category>
          
          <category> 动漫 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>链接</title>
      <link href="/2018/04/10/%E9%93%BE%E6%8E%A5/"/>
      <url>/2018/04/10/%E9%93%BE%E6%8E%A5/</url>
      <content type="html"><![CDATA[<a id="more"></a><ul><li><a href="https://www.zhihu.com/question/19942068/answer/269768796" target="_blank" rel="noopener">网上有哪些资源</a></li><li><a href="https://www.zhihu.com/question/50701819/answer/122610566" target="_blank" rel="noopener">新手程序员该做啥</a></li><li><a href="https://github.com/jobbole/awesome-programming-books" target="_blank" rel="noopener">经典编程书籍</a></li><li>go语言<ul><li><a href="https://tonybai.com/2015/04/30/go-and-https" target="_blank" rel="noopener">go和HTTPS</a></li><li><a href="http://www.oscarzhao.me/golang/2016/08/12/go-pipelines-cancellation.html" target="_blank" rel="noopener">Go的并发模型——流水线</a></li><li><a href="https://deepzz.com/post/golang-context-package-notes.html" target="_blank" rel="noopener">Go的并发模型——简单Context</a></li><li><a href="http://www.oscarzhao.me/golang/2016/08/26/go-context.html" target="_blank" rel="noopener">Go的并发模型——深入Context</a></li><li><a href="http://colobu.com/2017/05/12/call-private-functions-in-other-packages/" target="_blank" rel="noopener">访问私有函数和变量</a></li><li><a href="https://godoc.org" target="_blank" rel="noopener">go包搜索</a></li><li><a href="https://github.com/nange/datastructures-and-algorithms-using-four-language/tree/master/go" target="_blank" rel="noopener">各种数据结构实现</a></li></ul></li><li>开发工具<ul><li><a href="https://cse.google.com/cse/all" target="_blank" rel="noopener">gcse</a></li><li><a href="https://developers.google.com/custom-search/docs/overview" target="_blank" rel="noopener">gcse指南</a></li><li><a href="https://console.developers.google.com/apis" target="_blank" rel="noopener">google apis</a></li></ul></li></ul>]]></content>
      
      <categories>
          
          <category> 网站资源 </category>
          
          <category> 学习 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>访问私有函数和变量</title>
      <link href="/2018/04/09/%E8%AE%BF%E9%97%AE%E7%A7%81%E6%9C%89%E5%87%BD%E6%95%B0%E5%92%8C%E5%8F%98%E9%87%8F/"/>
      <url>/2018/04/09/%E8%AE%BF%E9%97%AE%E7%A7%81%E6%9C%89%E5%87%BD%E6%95%B0%E5%92%8C%E5%8F%98%E9%87%8F/</url>
      <content type="html"><![CDATA[<a id="more"></a><p>如果一个函数只有函数声明，没有函数定义，那么它的函数定义肯定在其他地方，然后两者通过符号链接实现了，比如：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> a</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> _<span class="string">"unsafe"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//go:linkname hello b.Greet</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fmt.Println(<span class="string">"Hello,World!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> b</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> _<span class="string">"a"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Greet</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>b包中要添加一个空的汇编文件<code>empty.s</code>，不然不会通过编译</p>]]></content>
      
      <categories>
          
          <category> golang </category>
          
          <category> 应用 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>http路由分发</title>
      <link href="/2018/03/30/http%E8%B7%AF%E7%94%B1%E5%88%86%E5%8F%91/"/>
      <url>/2018/03/30/http%E8%B7%AF%E7%94%B1%E5%88%86%E5%8F%91/</url>
      <content type="html"><![CDATA[<a id="more"></a><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据func(f HandlerFunc)ServeHTTP(w http.ResponseWriter,r *http.Request)&#123;f(w,r)&#125;</span></span><br><span class="line"><span class="comment">//HandlerFunc类型可以实现路由转发功能，申明mux类型</span></span><br><span class="line"><span class="keyword">var</span> mux <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="function"><span class="keyword">func</span><span class="params">(http.ResponseWriter, *http.Request)</span></span></span><br><span class="line"><span class="function">// 定义自己的<span class="title">Handler</span></span></span><br><span class="line"><span class="function"><span class="title">type</span> <span class="title">myHandler</span> <span class="title">struct</span></span> &#123;&#125;</span><br><span class="line"><span class="comment">//实现了ServeHTTP这个方法，实现了Handler接口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*myHandler)</span><span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter,r *http.Request)</span></span>&#123;</span><br><span class="line">fmt.Fprintf(w,<span class="string">"This is ServeHTTP!"</span>)</span><br><span class="line"><span class="keyword">if</span> f,ok:=mux[r.URL.String()];ok&#123;</span><br><span class="line">f(w,r)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayBye2</span><span class="params">(w http.ResponseWriter,r *http.Request)</span></span>  &#123;</span><br><span class="line">io.WriteString(w,<span class="string">"Bye!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHello2</span><span class="params">(w http.ResponseWriter,r *http.Request)</span></span>&#123;</span><br><span class="line">io.WriteString(w,<span class="string">"Hello!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">mux=<span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="function"><span class="keyword">func</span><span class="params">(http.ResponseWriter,*http.Request)</span>)</span></span><br><span class="line"><span class="function"><span class="title">mux</span>["/<span class="title">hello</span>"]=<span class="title">sayHello2</span></span></span><br><span class="line"><span class="function"><span class="title">mux</span>["/<span class="title">bye</span>"]=<span class="title">sayBye2</span></span></span><br><span class="line"><span class="function">//自己定义<span class="title">Server</span>结构体</span></span><br><span class="line"><span class="function"><span class="title">server</span>:=&amp;<span class="title">http</span>.<span class="title">Server</span></span>&#123;</span><br><span class="line"><span class="comment">//监听端口</span></span><br><span class="line">Addr:<span class="string">":1995"</span>,</span><br><span class="line"><span class="comment">//Handler函数</span></span><br><span class="line">Handler:&amp;myHandler&#123;&#125;,</span><br><span class="line">ReadTimeout:<span class="number">5</span>*time.Second,</span><br><span class="line">&#125;</span><br><span class="line">err:=server.ListenAndServe()</span><br><span class="line"><span class="keyword">if</span> err!=<span class="literal">nil</span>&#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> golang </category>
          
          <category> 网络 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>http(1)</title>
      <link href="/2018/03/29/http-1/"/>
      <url>/2018/03/29/http-1/</url>
      <content type="html"><![CDATA[<a id="more"></a><h3 id="1、设置静态目录"><a href="#1、设置静态目录" class="headerlink" title="1、设置静态目录"></a>1、设置静态目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">http.ListenAndServe(&quot;:1995&quot;,http.FileServer(http.Dir(&quot;.&quot;)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、搭建简单HTTP服务器"><a href="#2、搭建简单HTTP服务器" class="headerlink" title="2、搭建简单HTTP服务器"></a>2、搭建简单HTTP服务器</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHello</span><span class="params">(w http.ResponseWriter,r *http.Request)</span></span>&#123;</span><br><span class="line">r.ParseForm()</span><br><span class="line"><span class="comment">// 向服务器端输出请求的url信息</span></span><br><span class="line">fmt.Println(r.Form)</span><br><span class="line">fmt.Println(<span class="string">"path:"</span>,r.URL.Path)</span><br><span class="line">fmt.Println(<span class="string">"scheme:"</span>,r.URL.Scheme)</span><br><span class="line">fmt.Println(r.Form[<span class="string">"url_long"</span>])</span><br><span class="line"><span class="keyword">for</span> k,v:=<span class="keyword">range</span> r.Form&#123;</span><br><span class="line">fmt.Println(<span class="string">"key:"</span>,k)</span><br><span class="line">fmt.Println(<span class="string">"val:"</span>,strings.Join(v,<span class="string">" "</span>))</span><br><span class="line">&#125;</span><br><span class="line">fmt.Fprintf(w,<span class="string">"Hello gongshen!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">"/"</span>,sayHello)</span><br><span class="line">http.ListenAndServe(<span class="string">":1995"</span>,<span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、底层实现路由分发策略"><a href="#3、底层实现路由分发策略" class="headerlink" title="3、底层实现路由分发策略"></a>3、底层实现路由分发策略</h3>]]></content>
      
      <categories>
          
          <category> golang </category>
          
          <category> 网络 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Context</title>
      <link href="/2018/03/28/context/"/>
      <url>/2018/03/28/context/</url>
      <content type="html"><![CDATA[<h1 id="1、Context"><a href="#1、Context" class="headerlink" title="1、Context"></a>1、Context</h1><p>Context变量保存着每个Gorouting的执行状态。在网络编程下，当接收到一个Request请求并处理时，可能会在多个Gorouting中处理，那么这些Gorouting需要共享Request的一些信息；当Request被取消或者超时时，一并将Gorouting也清除。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Context <span class="keyword">interface</span> &#123;</span><br><span class="line">    Deadline() (deadline time.Time, ok <span class="keyword">bool</span>)</span><br><span class="line">    Done() &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">    Err() error</span><br><span class="line">    Value(key <span class="keyword">interface</span>&#123;&#125;) <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>Deadline：会返回一个超时时间，用来确定是否有时间足够开始工作</li><li>Done：返回一个channel，当Context被取消或者超时时，通道会关闭</li><li>Err：Done通道被关闭后，Err方法表明Context被撤销的原因</li><li>Value：可以让Goruting之间共享数据，参数是key，返回相应的value</li></ul><p>Gorouting和Context都是层层调用的，所以上层的Gorouting有办法关闭下层的Gorouting。<br>context.Background函数能返回Context的根节点——这个Context由接收请求的第一个Gorouting创建。</p><h1 id="2、Context的衍生"><a href="#2、Context的衍生" class="headerlink" title="2、Context的衍生"></a>2、Context的衍生</h1><p>下面这些函数都是接收父节点，并且设置一些状态值，生成子节点并传给下层Gorouting。</p><ul><li>WithCancel：还返回一个Cancel函数，用来控制该节点</li><li>WithDeadline：还返回一个带过期时间的Cancel函数，但是过期时间由<code>parent</code>和<code>deadline</code>决定</li><li>WithTimeout：还返回以一个带超时时间的Cancel函数，表示从现在开始剩余多少时间</li><li>WithValue：返回一个带有数据的子节点，使用<code>Value</code>方法可以返回其值</li></ul><h3 id="WithCancel"><a href="#WithCancel" class="headerlink" title="WithCancel"></a>WithCancel</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">gen := <span class="function"><span class="keyword">func</span><span class="params">(ctx context.Context)</span> &lt;-<span class="title">chan</span> <span class="title">int</span></span> &#123;</span><br><span class="line">dst := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">n := <span class="number">0</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> dst &lt;- n:</span><br><span class="line">n++</span><br><span class="line"><span class="keyword">case</span> &lt;-ctx.Done():<span class="comment">//判断该节点的Context是否结束</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> dst</span><br><span class="line">&#125;</span><br><span class="line">ctx, cancel := context.WithCancel(context.Background())</span><br><span class="line"><span class="keyword">defer</span> cancel()<span class="comment">//关闭该节点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> n := <span class="keyword">range</span> gen(ctx) &#123;</span><br><span class="line">fmt.Println(n)</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">5</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="WithDeadline"><a href="#WithDeadline" class="headerlink" title="WithDeadline"></a>WithDeadline</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ctx, cancel := context.WithDeadline(context.Background(), time.Now().Add(<span class="number">50</span>*time.Millisecond))</span><br><span class="line"><span class="comment">//尽管context会过期，但是还是要调用cancel方法，为了避免父context存在太长的时间</span></span><br><span class="line"><span class="keyword">defer</span> cancel()</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-time.After(<span class="number">1</span> * time.Second):</span><br><span class="line">fmt.Println(<span class="string">"sleptout!"</span>)</span><br><span class="line"><span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">fmt.Println(ctx.Err())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="WithValue"><a href="#WithValue" class="headerlink" title="WithValue"></a>WithValue</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> favContextKey <span class="keyword">string</span></span><br><span class="line">f := <span class="function"><span class="keyword">func</span><span class="params">(ctx context.Context, k favContextKey)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> v := ctx.Value(k); v != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Found value:"</span>, v)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"Key not found:"</span>, k)</span><br><span class="line">&#125;</span><br><span class="line">k := favContextKey(<span class="string">"language"</span>)</span><br><span class="line">ctx := context.WithValue(context.Background(), k, <span class="string">"Go"</span>)</span><br><span class="line">f(ctx, k)</span><br><span class="line">f(ctx, favContextKey(<span class="string">"color"</span>))</span><br></pre></td></tr></table></figure><h1 id="3、CSE的例子"><a href="#3、CSE的例子" class="headerlink" title="3、CSE的例子"></a>3、CSE的例子</h1><h3 id="userip-go"><a href="#userip-go" class="headerlink" title="userip.go"></a>userip.go</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从用户请求中解析出其IP地址，并将IP地址绑定在Context上</span></span><br><span class="line"><span class="keyword">package</span> userip</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"net"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FromRequest</span><span class="params">(req *http.Request)</span><span class="params">(net.IP,error)</span></span>&#123;</span><br><span class="line">ip,_,err:=net.SplitHostPort(req.RemoteAddr)</span><br><span class="line"><span class="keyword">if</span> err!=<span class="literal">nil</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>,fmt.Errorf(<span class="string">"userip:%q is not IP:Port"</span>,req.RemoteAddr)</span><br><span class="line">&#125;</span><br><span class="line">userIP:=net.ParseIP(ip)</span><br><span class="line"><span class="keyword">if</span> userIP==<span class="literal">nil</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>,fmt.Errorf(<span class="string">"userip:%q is not IP:Port"</span>,req.RemoteAddr)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> userIP,<span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> key <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userIPKey key = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewContext</span><span class="params">(ctx context.Context,userIP net.IP)</span><span class="title">context</span>.<span class="title">Context</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> context.WithValue(ctx,userIPKey,userIP)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FromContext</span><span class="params">(ctx context.Context)</span><span class="params">(net.IP,<span class="keyword">bool</span>)</span></span>&#123;</span><br><span class="line">userIP,ok:=ctx.Value(userIPKey).(net.IP)</span><br><span class="line"><span class="keyword">return</span> userIP,ok</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="google-go"><a href="#google-go" class="headerlink" title="google.go"></a>google.go</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//向Google发送请求</span></span><br><span class="line"><span class="keyword">package</span> google</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"book/pkg/context/Google_Web_Search/userip"</span></span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Results []Result</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Result <span class="keyword">struct</span> &#123;</span><br><span class="line">Title, URL <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Search</span><span class="params">(ctx context.Context, query <span class="keyword">string</span>)</span> <span class="params">(Results, error)</span></span> &#123;</span><br><span class="line">req, err := http.NewRequest(<span class="string">"GET"</span>, <span class="string">"https://www.googleapis.com/customsearch/v1?key=AIzaSyBX2ECpLHo6DWPZniHWyiP268nO780agAo&amp;cx=004634438224023994959:rb_4hy_d500"</span>, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">q := req.URL.Query()</span><br><span class="line">q.Set(<span class="string">"q"</span>, query)</span><br><span class="line"><span class="keyword">if</span> userIP, ok := userip.FromContext(ctx); ok &#123;</span><br><span class="line">q.Set(<span class="string">"userip"</span>, userIP.String())</span><br><span class="line">&#125;</span><br><span class="line">req.URL.RawQuery = q.Encode()</span><br><span class="line"><span class="keyword">var</span> results Results</span><br><span class="line">err = httpDo(ctx, req, <span class="function"><span class="keyword">func</span><span class="params">(resp *http.Response, err error)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"><span class="keyword">var</span> data <span class="keyword">struct</span> &#123;</span><br><span class="line">ResponseData <span class="keyword">struct</span> &#123;</span><br><span class="line">Results []<span class="keyword">struct</span> &#123;</span><br><span class="line">TitleNoFormatting <span class="keyword">string</span></span><br><span class="line">URL               <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := json.NewDecoder(resp.Body).Decode(&amp;data); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, res := <span class="keyword">range</span> data.ResponseData.Results &#123;</span><br><span class="line">results = <span class="built_in">append</span>(results, Result&#123;Title: res.TitleNoFormatting, URL: res.URL&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> results, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">httpDo</span><span class="params">(ctx context.Context, req *http.Request, f <span class="keyword">func</span>(*http.Response, error)</span> <span class="title">error</span>) <span class="title">error</span></span> &#123;</span><br><span class="line">tr := &amp;http.Transport&#123;&#125;</span><br><span class="line">client := &amp;http.Client&#123;Transport: tr&#125;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> error, <span class="number">1</span>)</span><br><span class="line"><span class="comment">//HTTP请求的响应调用 f() 函数</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; c &lt;- f(client.Do(req)) &#125;()</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line"><span class="keyword">return</span> ctx.Err()</span><br><span class="line"><span class="keyword">case</span> err := &lt;-c:</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="server-go"><a href="#server-go" class="headerlink" title="server.go"></a>server.go</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//处理http请求</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"book/pkg/context/Google_Web_Search/google"</span></span><br><span class="line"><span class="string">"book/pkg/context/Google_Web_Search/userip"</span></span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"html/template"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">"/search"</span>, handleSearch)</span><br><span class="line">log.Fatal(http.ListenAndServe(<span class="string">":8080"</span>, <span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleSearch</span><span class="params">(w http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">ctx    context.Context</span><br><span class="line">cancel context.CancelFunc</span><br><span class="line">)</span><br><span class="line">timeout, err := time.ParseDuration(req.FormValue(<span class="string">"timeout"</span>))</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line"></span><br><span class="line">ctx, cancel = context.WithTimeout(context.Background(), timeout)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ctx, cancel = context.WithCancel(context.Background())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> cancel()</span><br><span class="line"></span><br><span class="line">query := req.FormValue(<span class="string">"q"</span>)</span><br><span class="line"><span class="keyword">if</span> query == <span class="string">""</span> &#123;</span><br><span class="line">http.Error(w, <span class="string">"no query"</span>, http.StatusBadRequest)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">userIP, err := userip.FromRequest(req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(w, err.Error(), http.StatusBadRequest)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">ctx = userip.NewContext(ctx, userIP)</span><br><span class="line"></span><br><span class="line">start := time.Now()</span><br><span class="line">results, err := google.Search(ctx, query)</span><br><span class="line">elapsed := time.Since(start)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(w, err.Error(), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := resultsTemplate.Execute(w, <span class="keyword">struct</span> &#123;</span><br><span class="line">Results          google.Results</span><br><span class="line">Timeout, Elapsed time.Duration</span><br><span class="line">&#125;&#123;</span><br><span class="line">Results: results,</span><br><span class="line">Timeout: timeout,</span><br><span class="line">Elapsed: elapsed,</span><br><span class="line">&#125;); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Print(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> resultsTemplate = template.Must(template.New(<span class="string">"results"</span>).Parse(<span class="string">`</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;head/&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">  &lt;ol&gt;</span></span><br><span class="line"><span class="string">  &#123;&#123;range .Results&#125;&#125;</span></span><br><span class="line"><span class="string">    &lt;li&gt;&#123;&#123;.Title&#125;&#125; - &lt;a href="&#123;&#123;.URL&#125;&#125;"&gt;&#123;&#123;.URL&#125;&#125;&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">  &#123;&#123;end&#125;&#125;</span></span><br><span class="line"><span class="string">  &lt;/ol&gt;</span></span><br><span class="line"><span class="string">  &lt;p&gt;&#123;&#123;len .Results&#125;&#125; results in &#123;&#123;.Elapsed&#125;&#125;; timeout &#123;&#123;.Timeout&#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">`</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> golang </category>
          
          <category> package </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Readme</title>
      <link href="/2018/03/28/channel_readme/"/>
      <url>/2018/03/28/channel_readme/</url>
      <content type="html"><![CDATA[<a id="more"></a><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><h3 id="缓冲通道"><a href="#缓冲通道" class="headerlink" title="缓冲通道"></a>缓冲通道</h3><ol><li><code>elem,ok:=&lt;-strCh</code>，没有元素时，当前gorouting进入<code>GWaiting</code>状态，当通道关闭时，<code>elem</code>会赋予相应的零值<code>ok</code>值为false</li><li>试图从一个未被初始化的通道值（值为<code>nil</code>的通道）接收元素值，会被永久阻塞</li><li>发送操作会使通道<code>复制</code>被发送的元素，如果<code>通道已空</code>且<code>有接收方在等待</code>，则直接把元素复制到最早等待的接收方中，否则复制到通道的缓存中</li><li>如果传递的值是<code>引用类型</code>，那么接收方的操作会影响发送方的<code>源值</code></li><li>可以使用<code>len</code>获取通道中的元素值数量，使用<code>cap</code>获取通道的容量。</li><li><code>Notify(c chan&lt;- os.Signal)</code>：约束的是方法的实现方（适用于接口）；<code>Notify()&lt;-chan os.Signal</code>：约束方法的调用方（适用于函数和结构体方法）</li><li>一般情况下不能转换通道类型，利用函数声明转换是Go的语法糖</li><li>可以使用<code>for</code>语句可以不断地从通道接收元素值，直到通道关闭，但是通道不能是一个<code>发送通道</code></li><li><code>select</code>后面直接加花括号，然后<code>case</code>后面只能是接收或者发送语句，<code>case</code>右边的表达式会先求值，相同条件时会随机选择一个</li><li><code>break</code>语句可以直接跳出<code>select</code>，和<code>for</code>一起用时，使用<code>break + 标签</code>来表示中断紧贴于标签下的语句。</li><li>单向通道可以对实现类型进行约束</li><li>向一个关闭的通道发送数据会阻塞，但是接收端可以在关闭的通道接收数据，所以建议在发送端关闭通道</li><li>建议用于传递<code>信号</code>的通道都以<code>struct{}</code>作为元素类型，因为空结构体类型是不占内存空间的，并且拥有相同的内存地址。<h3 id="非缓冲通道"><a href="#非缓冲通道" class="headerlink" title="非缓冲通道"></a>非缓冲通道</h3></li><li>非缓冲通道只能同步的传递元素值</li><li>向该通道<code>发送</code>元素值的操作会被阻塞，直到至少有一个针对该通道的接收操作，接收操作会先得到元素值的副本，然后唤醒发送方的gorouting，也就是说接收操作比发送操作先完成</li><li>从该通道<code>接收</code>元素值的操作会被阻塞，直到至少有一个针对该通道的发送操作，发送操作会直接把元素值复制给接收方，然后唤醒接收方的gorouting，所以发送操作比接收操作先完成<h3 id="time包"><a href="#time包" class="headerlink" title="time包"></a>time包</h3><strong>定时器</strong></li><li>定时器<code>Timer</code>，我们不能使用复合字面量来初始化它，因为它含有包级私有字段，使用<code>time.NewTimer</code>和<code>time.AfterFunc</code>函数来构建</li><li>定时器<code>Timer</code>中有一个通道<code>C</code>的字段，当定时器到期时发送当前时间到通道<code>C</code></li><li><code>time.After</code>就是<code>time.NewTimer().C</code>的超时设定的一种快捷方式</li><li>每次循环都要新建定时器有先浪费，我们可以使用<code>timer.Reset</code>重置来复用</li><li>如果在<code>定时器</code>到期之前停止了它，再去接收<code>C</code>的元素值会一直阻塞</li><li>如果在<code>定时器</code>到期之后未能及时接收元素值，那么即使重置以后，<code>C</code>字段还是会一直缓存那个元素值，新的通知会被丢弃</li><li><code>time.AfterFunc</code>也会新建定时器，但是到期之后不会发送通知，而是新启用一个<code>gorouting</code>执行传入的函数</li></ol><p><strong>断续器</strong></p><ol><li>断续器会间隔一段时间向通道<code>C</code>发送时间</li><li>使用<code>time.NewTicker</code>初始化断续器</li><li>使用<code>Stop</code>方法停止断续器，如果此时字段<code>C</code>存在元素值，那么会保存在那里，等待接收</li><li>断续器适用于定时任务的触发器</li></ol>]]></content>
      
      <categories>
          
          <category> golang </category>
          
          <category> channel </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>模拟pipe</title>
      <link href="/2018/03/27/pipe/"/>
      <url>/2018/03/27/pipe/</url>
      <content type="html"><![CDATA[<a id="more"></a><h3 id="1、匿名管道"><a href="#1、匿名管道" class="headerlink" title="1、匿名管道"></a>1、匿名管道</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"os/exec"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"bufio"</span></span><br><span class="line"><span class="string">"bytes"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">runCmd</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> useBufIO=<span class="literal">false</span></span><br><span class="line">cmd0 := exec.Command(<span class="string">"echo"</span>, <span class="string">"-n"</span>, <span class="string">"My first command comes from golang."</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置一个输出通道</span></span><br><span class="line">stdout0, err := cmd0.StdoutPipe()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Error:Counld't obtain the stdout pipe from command NO.0:%s\n"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Start</span></span><br><span class="line"><span class="keyword">if</span> err := cmd0.Start(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Error:The command NO.0 can not be startup:%s\n"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用read方法获取命令</span></span><br><span class="line"><span class="keyword">var</span> output0 = <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !useBufIO &#123;</span><br><span class="line"><span class="keyword">var</span> outputBuf0 bytes.Buffer</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">tempOutput0 := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">5</span>)</span><br><span class="line">n, err := stdout0.Read(tempOutput0)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Error:Couldn't read data from the pipe:%s\n"</span>, err)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> n &gt; <span class="number">0</span> &#123;</span><br><span class="line">outputBuf0.Write(tempOutput0[:n])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"%s\n"</span>, outputBuf0.String())</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 缓存读取器</span></span><br><span class="line"><span class="keyword">var</span> isPrefix <span class="keyword">bool</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">outputBuf0 := bufio.NewReaderSize(stdout0, <span class="number">5</span>)</span><br><span class="line">output0, isPrefix, err = outputBuf0.ReadLine()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Error:Couldn't read data from the pipe:%s\n"</span>, err)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"%s"</span>, <span class="keyword">string</span>(output0))</span><br><span class="line"><span class="keyword">if</span> isPrefix == <span class="literal">false</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过管道将输出值作为另一个命令的输入</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">runCmdPipe</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">var</span> outputBuf1 bytes.Buffer</span><br><span class="line"><span class="keyword">var</span> outputBuf2 bytes.Buffer</span><br><span class="line">cmd1:=exec.Command(<span class="string">"ps"</span>,<span class="string">"aux"</span>)</span><br><span class="line">cmd2:=exec.Command(<span class="string">"grep"</span>,<span class="string">"apipe"</span>)</span><br><span class="line"><span class="comment">//将所有的输出内容都记录到这里</span></span><br><span class="line">cmd1.Stdout=&amp;outputBuf1</span><br><span class="line"><span class="keyword">if</span> err:=cmd1.Start();err!=<span class="literal">nil</span>&#123;</span><br><span class="line">fmt.Printf(<span class="string">"Error:The frist command can not be startup:%s\n"</span>,err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cmd1结束运行之前，wait()调用会一直阻塞</span></span><br><span class="line"><span class="keyword">if</span> err:=cmd1.Wait();err!=<span class="literal">nil</span>&#123;</span><br><span class="line">fmt.Printf(<span class="string">"Error:Can't wait for the first command:%s\n"</span>,err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cmd2.Stdin=&amp;outputBuf1</span><br><span class="line">cmd2.Stdout=&amp;outputBuf2</span><br><span class="line"><span class="keyword">if</span> err:=cmd2.Start();err!=<span class="literal">nil</span>&#123;</span><br><span class="line">fmt.Printf(<span class="string">"Error:The second command can not be startup:%s\n"</span>,err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err:=cmd2.Wait();err!=<span class="literal">nil</span>&#123;</span><br><span class="line">fmt.Printf(<span class="string">"Error:Cant't wait for the second command:%s\n"</span>,err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"%s\n"</span>,outputBuf2.String())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">runCmd()</span><br><span class="line">fmt.Println()</span><br><span class="line">runCmdPipe()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、命名管道（文件管道）和内存管道"><a href="#2、命名管道（文件管道）和内存管道" class="headerlink" title="2、命名管道（文件管道）和内存管道"></a>2、命名管道（文件管道）和内存管道</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基于文件的管道，其中一端未绪前阻塞另一端的进程</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fileBasePipe</span><span class="params">()</span></span> &#123;</span><br><span class="line">reader,writer,err:=os.Pipe()</span><br><span class="line"><span class="keyword">if</span> err!=<span class="literal">nil</span>&#123;</span><br><span class="line">fmt.Printf(<span class="string">"Error:Create named pipe failed:%s\n"</span>,err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">outPut:=<span class="built_in">make</span>([]<span class="keyword">byte</span>,<span class="number">100</span>)</span><br><span class="line">n,err:=reader.Read(outPut)</span><br><span class="line"><span class="keyword">if</span> err!=<span class="literal">nil</span>&#123;</span><br><span class="line">fmt.Printf(<span class="string">"Error:Could't read data from the named pipe: %s\n"</span>,err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"Readed %d byte(s)[based pipe]\n"</span>,n)</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(outPut))</span><br><span class="line">&#125;()</span><br><span class="line">inPut:=<span class="built_in">make</span>([]<span class="keyword">byte</span>,<span class="number">26</span>)</span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">65</span>;i&lt;<span class="number">90</span>;i++&#123;</span><br><span class="line">inPut[i<span class="number">-65</span>]=<span class="keyword">byte</span>(i)</span><br><span class="line">&#125;</span><br><span class="line">n,err:=writer.Write(inPut)</span><br><span class="line"><span class="keyword">if</span> err!=<span class="literal">nil</span>&#123;</span><br><span class="line">fmt.Printf(<span class="string">"Error: Couldn't write data to the named pipe: %s\n"</span>,err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"Written %d byte(s).[based pipe]\n"</span>,n)</span><br><span class="line">time.Sleep(<span class="number">200</span>*time.Millisecond)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基于内存的有原子性操作的管道</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">memoryBasePipe</span><span class="params">()</span></span> &#123;</span><br><span class="line">reader, writer := io.Pipe()</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">outPut := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">100</span>)</span><br><span class="line">n,err := reader.Read(outPut)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Error:Read fatal: %s\n"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"Readed %d byte(s)[based pipe]\n"</span>, n)</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(outPut))</span><br><span class="line">&#125;()</span><br><span class="line">inPut:=<span class="built_in">make</span>([]<span class="keyword">byte</span>,<span class="number">26</span>)</span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">65</span>;i&lt;<span class="number">90</span>;i++&#123;</span><br><span class="line">inPut[i<span class="number">-65</span>]=<span class="keyword">byte</span>(i)</span><br><span class="line">&#125;</span><br><span class="line">n, err := writer.Write(inPut)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Error:Write fatal: %s\n"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"Written %d byte(s).[based pipe]\n"</span>, n)</span><br><span class="line">time.Sleep(<span class="number">200</span>*time.Millisecond)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fileBasePipe()</span><br><span class="line">fmt.Println()</span><br><span class="line">memoryBasePipe()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> golang </category>
          
          <category> 管道 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>panic和recover</title>
      <link href="/2018/03/27/panic%E5%92%8Crecover/"/>
      <url>/2018/03/27/panic%E5%92%8Crecover/</url>
      <content type="html"><![CDATA[<a id="more"></a><ul><li>panic用于停止当前的控制流程并引发一个恐慌</li><li>recover用于使当前程序从恐慌中恢复并重新获得流程控制权</li><li>recover函数的结果是一个interface{}类型，如果结果不是nil，那么就有问题啦！</li><li>recover和defer应该配合使用</li></ul><p>我们看下标准库fmt中的Token是怎么处理的<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *ss)</span> <span class="title">Token</span><span class="params">(skipSpace <span class="keyword">bool</span>, f <span class="keyword">func</span>(<span class="keyword">rune</span>)</span> <span class="title">bool</span>) <span class="params">(tok []<span class="keyword">byte</span>, err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> e := <span class="built_in">recover</span>(); e != <span class="literal">nil</span> &#123;<span class="comment">//判断recover函数的结果是否为nil</span></span><br><span class="line"><span class="keyword">if</span> se, ok := e.(scanError); ok &#123;<span class="comment">//判断panic的类型</span></span><br><span class="line">err = se.err</span><br><span class="line"><span class="comment">//如果panic是这个类型，那么这个值就会赋值给结果值变量err，</span></span><br><span class="line"><span class="comment">//这样做到了精确控制panic，将已经recover的恐慌当作常规结果返回</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(e)</span><br><span class="line"><span class="comment">//否则恐慌会再次引发</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>恐慌被传递到调用栈的最顶层的结果：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">panic</span>: An intended fatal error! [recovered]</span><br><span class="line"><span class="built_in">panic</span>: An intended fatal error!</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> golang </category>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>defer和闭包</title>
      <link href="/2018/03/27/defer/"/>
      <url>/2018/03/27/defer/</url>
      <content type="html"><![CDATA[<a id="more"></a><ul><li>只有当defer语句执行完，外围函数才会返回</li><li>外围函数如果引发了<code>panic</code>，<code>defer</code>语句也会执行完panic才会扩散</li><li>在defer执行的时候，针对defer语句的表达式会被压栈，等到外围函数结束时，才依次从栈中取出</li><li>defer是在函数退出前执行，并且是<code>值传递</code></li></ul><h1 id="1、闭包的值传递和指针传递"><a href="#1、闭包的值传递和指针传递" class="headerlink" title="1、闭包的值传递和指针传递"></a>1、闭包的值传递和指针传递</h1><h3 id="1-闭包的值传递"><a href="#1-闭包的值传递" class="headerlink" title="1.闭包的值传递"></a>1.闭包的值传递</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line"><span class="keyword">var</span> m <span class="keyword">int</span></span><br><span class="line">m=<span class="number">10</span></span><br><span class="line">fmt.Println(m)</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;(m)</span><br><span class="line">m=<span class="number">20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure></p><h3 id="2-闭包的指针传递"><a href="#2-闭包的指针传递" class="headerlink" title="2.闭包的指针传递:"></a>2.闭包的指针传递:</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line"><span class="keyword">var</span> m <span class="keyword">int</span></span><br><span class="line">m=<span class="number">10</span></span><br><span class="line">fmt.Println(m)</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(m)<span class="comment">//闭包的意思就是他已经把指针准备好了</span></span><br><span class="line">&#125;()</span><br><span class="line">m=<span class="number">20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">20</span></span><br></pre></td></tr></table></figure></p><h1 id="2、defer的值传递"><a href="#2、defer的值传递" class="headerlink" title="2、defer的值传递"></a>2、defer的值传递</h1><h3 id="1-函数参数是值传递："><a href="#1-函数参数是值传递：" class="headerlink" title="1.函数参数是值传递："></a>1.函数参数是值传递：</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line"><span class="keyword">var</span> m <span class="keyword">int</span></span><br><span class="line">m=<span class="number">10</span></span><br><span class="line">fmt.Println(m)</span><br><span class="line"><span class="keyword">defer</span> Print(m)</span><br><span class="line">m=<span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Print</span><span class="params">(m <span class="keyword">interface</span>&#123;&#125;)</span></span>  &#123;</span><br><span class="line">fmt.Println(m.(<span class="keyword">int</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure></p><h3 id="2-如果用指针作为函数参数："><a href="#2-如果用指针作为函数参数：" class="headerlink" title="2.如果用指针作为函数参数："></a>2.如果用指针作为函数参数：</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line"><span class="keyword">var</span> m *<span class="keyword">int</span></span><br><span class="line">m=<span class="built_in">new</span>(<span class="keyword">int</span>)</span><br><span class="line">*m=<span class="number">10</span></span><br><span class="line">fmt.Println(*m)</span><br><span class="line"><span class="keyword">defer</span> Print(m)</span><br><span class="line">*m=<span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Print</span><span class="params">(m <span class="keyword">interface</span>&#123;&#125;)</span></span>  &#123;</span><br><span class="line">fmt.Println(*m.(*<span class="keyword">int</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">20</span></span><br></pre></td></tr></table></figure></p><hr><h1 id="3、容易入的”坑”"><a href="#3、容易入的”坑”" class="headerlink" title="3、容易入的”坑”"></a>3、容易入的”坑”</h1><h3 id="例子1："><a href="#例子1：" class="headerlink" title="例子1："></a>例子1：</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span><span class="params">(result <span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">result++</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>解：<br><code>return 0</code>并不是原子操作,应该写成<code>result=0</code>,<code>return</code>;所以结果是<code>1</code>。</p></blockquote><h3 id="例子2："><a href="#例子2：" class="headerlink" title="例子2："></a>例子2：</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span><span class="params">(r <span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">(r <span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">r=r+<span class="number">5</span></span><br><span class="line">&#125;(r)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>解：<br>先<code>r=1</code>,再<code>return</code>,但是闭包中是值传递,不会影响r的值,所以结果是<code>1</code>。</p></blockquote>]]></content>
      
      <categories>
          
          <category> golang </category>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>职责链</title>
      <link href="/2018/03/27/%E8%81%8C%E8%B4%A3%E9%93%BE/"/>
      <url>/2018/03/27/%E8%81%8C%E8%B4%A3%E9%93%BE/</url>
      <content type="html"><![CDATA[<a id="more"></a><h1>  </h1><p>使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。<br>将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它。</p><ul><li>链对象包含当前职责对象以及下一个职责链</li><li>职责对象提供接口表示能否处理对应请求</li><li>职责对象提供处理函数处理相关</li></ul><p><img src="/images/responsibity.PNG" alt=""></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理请求接口</span></span><br><span class="line"><span class="keyword">type</span> Manager <span class="keyword">interface</span> &#123;</span><br><span class="line">SetSuccessor(Manager)</span><br><span class="line">HandleRequest(<span class="keyword">string</span>,<span class="keyword">int</span>)<span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求链</span></span><br><span class="line"><span class="keyword">type</span> RequestChain <span class="keyword">struct</span> &#123;</span><br><span class="line">successor Manager <span class="comment">// 继承者</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *RequestChain)</span> <span class="title">SetSuccessor</span><span class="params">(i Manager)</span></span> &#123;</span><br><span class="line">r.successor = i</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//经理</span></span><br><span class="line"><span class="keyword">type</span> jingli <span class="keyword">struct</span> &#123;</span><br><span class="line">RequestChain</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Newjingli</span><span class="params">()</span>*<span class="title">jingli</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> &amp;jingli&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(j *jingli)</span> <span class="title">HandleRequest</span><span class="params">(name <span class="keyword">string</span>,num <span class="keyword">int</span>)</span><span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> name == <span class="string">"请假"</span> &amp;&amp; num &lt;= <span class="number">2</span>&#123;</span><br><span class="line">fmt.Printf(<span class="string">"经理允许%s%d\n"</span>,name,num)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> j.successor!=<span class="literal">nil</span>&#123;</span><br><span class="line">fmt.Printf(<span class="string">"经理不允许%s%d\n"</span>, name, num)</span><br><span class="line"><span class="keyword">return</span> j.successor.HandleRequest(name,num)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//总经理</span></span><br><span class="line"><span class="keyword">type</span> zongjingli <span class="keyword">struct</span> &#123;</span><br><span class="line">RequestChain</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Newzongjingli</span><span class="params">()</span>*<span class="title">zongjingli</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> &amp;zongjingli&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(z *zongjingli)</span> <span class="title">HandleRequest</span><span class="params">(name <span class="keyword">string</span>,num <span class="keyword">int</span>)</span><span class="title">bool</span></span> &#123;</span><br><span class="line"> <span class="keyword">if</span> name == <span class="string">"请假"</span> &amp;&amp; num &lt;= <span class="number">5</span>&#123;</span><br><span class="line"> fmt.Printf(<span class="string">"总经理允许%s%d\n"</span>, name, num)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> z.successor != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"总经理不允许%s%d\n"</span>, name, num)</span><br><span class="line"><span class="keyword">return</span> z.successor.HandleRequest(name, num)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//总监</span></span><br><span class="line"><span class="keyword">type</span> zongjian <span class="keyword">struct</span> &#123;</span><br><span class="line">RequestChain</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Newzongjian</span><span class="params">()</span>*<span class="title">zongjian</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> &amp;zongjian&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(z *zongjian)</span> <span class="title">HandleRequest</span><span class="params">(name <span class="keyword">string</span>,num <span class="keyword">int</span>)</span><span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> name == <span class="string">"请假"</span> &amp;&amp; num &lt;= <span class="number">5</span>&#123;</span><br><span class="line">fmt.Printf(<span class="string">"总监允许%s%d\n"</span>, name, num)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> z.successor != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"总监不允许%s%d\n"</span>, name, num)</span><br><span class="line"><span class="keyword">return</span> z.successor.HandleRequest(name, num)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> name == <span class="string">"加薪"</span> &amp;&amp; num &lt;= <span class="number">500</span>&#123;</span><br><span class="line">fmt.Printf(<span class="string">"总监允许%s%d\n"</span>, name, num)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> z.successor != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"总监不允许%s%d\n"</span>, name, num)</span><br><span class="line"><span class="keyword">return</span> z.successor.HandleRequest(name, num)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">c1:=Newjingli()</span><br><span class="line">c2:=Newzongjingli()</span><br><span class="line">c3:=Newzongjian()</span><br><span class="line">c1.SetSuccessor(c2)</span><br><span class="line">c2.SetSuccessor(c3)</span><br><span class="line">c1.HandleRequest(<span class="string">"请假"</span>,<span class="number">2</span>)</span><br><span class="line">c1.HandleRequest(<span class="string">"请假"</span>,<span class="number">4</span>)</span><br><span class="line">c1.HandleRequest(<span class="string">"加薪"</span>,<span class="number">400</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> golang </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>笔记</title>
      <link href="/2018/03/27/%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/03/27/%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h3 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h3><ol><li>golang中值类型的零值为空或者是0，指针类型的零值为nil。</li><li>switch的类型断言必须遵守类型断言的规则</li><li>switch的类型断言中不能出现<code>fallthrough</code></li><li>当使用<code>for range</code>迭代一个通道值为<code>nil</code>时，会永远阻塞在<code>for</code>语句上</li></ol>]]></content>
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>方法</title>
      <link href="/2018/03/27/method/"/>
      <url>/2018/03/27/method/</url>
      <content type="html"><![CDATA[<a id="more"></a><h1 id="可寻址值和不可寻址值调用方法"><a href="#可寻址值和不可寻址值调用方法" class="headerlink" title="可寻址值和不可寻址值调用方法"></a>可寻址值和不可寻址值调用方法</h1><h3 id="示例一："><a href="#示例一：" class="headerlink" title="示例一："></a>示例一：</h3><p>对于一个非指针类型，它关联的方法集中只包含它的值方法。对于一个指针类型，它关联的方法集中既包含值方法和指针方法。</p><h2 id="但是非指针类型也是可以调到指针方法的，因为Go进行了自动转换"><a href="#但是非指针类型也是可以调到指针方法的，因为Go进行了自动转换" class="headerlink" title="但是非指针类型也是可以调到指针方法的，因为Go进行了自动转换"></a>但是非指针类型也是可以调到指针方法的，因为Go进行了自动转换</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> data <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 指针类型的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *data)</span><span class="title">Print</span><span class="params">()</span></span>  &#123;</span><br><span class="line">fmt.Println(<span class="string">"name:"</span>,d.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 值类型的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d data)</span><span class="title">Print2</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"name2:"</span>,d.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Printer <span class="keyword">interface</span> &#123;</span><br><span class="line">Print()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> p Printer = &amp;data&#123;<span class="string">"one"</span>&#125;</span><br><span class="line">p.Print()</span><br><span class="line"></span><br><span class="line"><span class="comment">// p是一个指针类型</span></span><br><span class="line"></span><br><span class="line">m1 := <span class="keyword">map</span>[<span class="keyword">string</span>]data&#123;<span class="string">"x"</span>:&#123;<span class="string">"two"</span>&#125;&#125;</span><br><span class="line">n:=m1[<span class="string">"x"</span>]</span><br><span class="line">n.Print()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重要！</span></span><br><span class="line"><span class="comment">// n是值类型，但是可以调用指针类型的方法，Go进行了自动转换</span></span><br><span class="line"><span class="comment">// n.Print()  ==  (&amp;n).Print()</span></span><br><span class="line"></span><br><span class="line">m2:=<span class="keyword">map</span>[<span class="keyword">string</span>]*data&#123;<span class="string">"x"</span>:&#123;<span class="string">"three"</span>&#125;&#125;</span><br><span class="line">n2:=m2[<span class="string">"x"</span>]</span><br><span class="line">n2.Print2()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重要！</span></span><br><span class="line"><span class="comment">// n2是指针类型，但是可以调用值类型的方法，Go进行了自动转换</span></span><br><span class="line"><span class="comment">// n2.Print2()  ==  (*n2).Print2()</span></span><br><span class="line"></span><br><span class="line">s:=[]data&#123;</span><br><span class="line">&#123;<span class="string">"four"</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line">s[<span class="number">0</span>].Print()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对于结构体类型的`slice`是指针类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="示例二："><a href="#示例二：" class="headerlink" title="示例二："></a>示例二：</h3><h2 id="receiver变量其实就是源值的一个复制品。如果receiver是值类型，那么自然没有办法修改源值；如果receiver是指针类型，那么指针值指向的就是源值的地址，就能够修改源值。"><a href="#receiver变量其实就是源值的一个复制品。如果receiver是值类型，那么自然没有办法修改源值；如果receiver是指针类型，那么指针值指向的就是源值的地址，就能够修改源值。" class="headerlink" title="receiver变量其实就是源值的一个复制品。如果receiver是值类型，那么自然没有办法修改源值；如果receiver是指针类型，那么指针值指向的就是源值的地址，就能够修改源值。"></a>receiver变量其实就是源值的一个复制品。如果receiver是值类型，那么自然没有办法修改源值；如果receiver是指针类型，那么指针值指向的就是源值的地址，就能够修改源值。</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> myInt <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 指针类型方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *myInt)</span><span class="title">add2</span><span class="params">(another <span class="keyword">int</span>)</span><span class="title">myInt</span></span>&#123;</span><br><span class="line">*i=*i+myInt(another)</span><br><span class="line"><span class="keyword">return</span> *i</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 值类型方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i myInt)</span><span class="title">add</span><span class="params">(another <span class="keyword">int</span>)</span><span class="title">myInt</span></span>&#123;</span><br><span class="line">i=i+myInt(another)</span><br><span class="line"><span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">i1:=myInt(<span class="number">1</span>)</span><br><span class="line">i2:=i1.add(<span class="number">2</span>)</span><br><span class="line">fmt.Println(i1,i2)</span><br><span class="line"><span class="comment">// 结果是：1,3</span></span><br><span class="line">i2=i1.add2(<span class="number">2</span>)</span><br><span class="line">fmt.Println(i1,i2)</span><br><span class="line"><span class="comment">// 结果是：3,3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> golang </category>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>函数</title>
      <link href="/2018/03/26/%E5%87%BD%E6%95%B0/"/>
      <url>/2018/03/26/%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<a id="more"></a><h1 id="将函数当作参数，进行二元操作"><a href="#将函数当作参数，进行二元操作" class="headerlink" title="将函数当作参数，进行二元操作"></a>将函数当作参数，进行二元操作</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> binaryOperation <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span><span class="params">(<span class="keyword">int</span>,error)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">operate</span><span class="params">(op1 <span class="keyword">int</span>,op2 <span class="keyword">int</span>,op binaryOperation)</span><span class="params">(result <span class="keyword">int</span>,err error)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> op==<span class="literal">nil</span>&#123;</span><br><span class="line">err=errors.New(<span class="string">"invaild functions!"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> op(op1,op2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用户可以自己实现除法操作</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">divide</span><span class="params">(op1 <span class="keyword">int</span>,op2 <span class="keyword">int</span>)</span><span class="params">(result <span class="keyword">int</span>,err error)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> op2==<span class="number">0</span>&#123;</span><br><span class="line">err=errors.New(<span class="string">"divide by zero!"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">result=op1/op2</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line"><span class="keyword">var</span> result <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line">result,err=operate(<span class="number">0</span>,<span class="number">2</span>,divide)</span><br><span class="line">fmt.Printf(<span class="string">"result：%v，err：%v\n"</span>,result,err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> golang </category>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Readme</title>
      <link href="/2018/03/26/gorouting_thread/"/>
      <url>/2018/03/26/gorouting_thread/</url>
      <content type="html"><![CDATA[<p><a href="https://www.processon.com/mindmap/5aa9071ee4b0262b8b37e102" target="_blank" rel="noopener">go并发思维导图</a></p><h1 id="Go的线程模型"><a href="#Go的线程模型" class="headerlink" title="Go的线程模型"></a>Go的线程模型</h1><p>Go不推荐使用共享内存的方式传递数据，而推荐使用channel（或称“通道”）在多个goroutine之间传递数据，同时保证整个过程的并发安全性。不过，作为可选方法，Go依然提供了一些传统的同步方法（比如互斥量、条件变量等）。</p><p>在操作系统提供的内核线程之上，Go搭建了一个特有的两级线程模型。我们可以将goroutine看作是Go特有的应用程序线程。但是，goroutine背后的支撑体系远没有这么简单。</p><p>说起Go的线程实现模型，有三个必知的核心元素，它们支撑起了这个模型的主框架。</p><ul><li><p>M：machine的缩写。一个M代表一个内核线程，或者“工作线程”。</p></li><li><p>P：processor的缩写。一个P代表执行一个Go代码片段所必需的资源（或称“上下文环境”）。</p></li><li><p>G：goroutine的缩写。一个G代表一个Go代码片段。前者是对后者的一种封装。</p></li></ul><p>简单来说，一个G的执行需要P和M的支持。一个M在与一个P关联之后，就形成了一个有效的G运行环境（内核线程+上下文环境）。每个P都会包含一个可运行的G的队列（runq）。该队列中的G会被依次传递给与本地P关联的M，并获得运行时机。在这里，我把运行当前G的那个M称为“当前M”，并把与当前M关联的那个P称为“本地P”。后面我会以此为术语进行描述。</p><p>从宏观上看，M、P和G之间的联系如图2-1所示，但是实际关系要比这幅图所展示的关系复杂很多。不过，请先不用理会这里所说的复杂关系，让我们把焦点扩大一些，看看它们与内核调度实体（KSE）之间的关系是怎样的，如图2-2所示。</p><p><img src="\images\2-1.png" alt="图2-1"></p><h5 id="图2-1"><a href="#图2-1" class="headerlink" title="图2-1"></a>图2-1</h5><p><img src="\images\2-2.png" alt="图2-2"></p><h5 id="图2-2"><a href="#图2-2" class="headerlink" title="图2-2"></a>图2-2</h5><p>可以看到，M与KSE之间总是一对一的关系，一个M能且仅能代表一个内核线程。Go的运行时系统（runtime system）用M代表一个内核调度实体。M与KSE之间的关联非常稳固，一个M在其生命周期内，会且仅会与一个KSE产生关联。相比之下，M与P、P与G之间的关联都是易变的，它们之间的关系会在实际调度的过程中改变。此外，M与G之间也会建立关联，因为一个G终归会由一个M来负责运行；它们之间的关联会由P来牵线。注意，由于M、P和G之间的关系在实际调度过程中多变，图2-2中的可能关联仅能作为一般性的示意。</p><p>至此，你已经知道了这些核心实体之间可能存在的关系。Go的运行时系统会对这些实体的实例进行实时管理和调度。接下来，我会专门对此进行介绍。现在，让我们再次聚焦，看一看在这些实体内部都有哪些值得关注的细节。</p><h3 id="M（内核线程）"><a href="#M（内核线程）" class="headerlink" title="M（内核线程）"></a>M（内核线程）</h3><p>一个M代表了一个内核线程。在大多数情况下，创建一个新M的原因是没有足够的M来关联P并运行其中可运行的G。不过，在运行时系统执行系统监控或垃圾回收等任务的时候，也会导致新M的创建。M的部分结构如图2-3所示。</p><p><img src="\images\2-3.png" alt="图2-3"></p><h5 id="图2-3-M的结构（部分）"><a href="#图2-3-M的结构（部分）" class="headerlink" title="图2-3　M的结构（部分）"></a>图2-3　M的结构（部分）</h5><p>M结构中的字段众多，这里只挑选了几个最重要的字段。列表中，每一行都展示了一个字段，左边是字段名，右边是字段类型。其中，字段<code>g0</code>表示一个特殊的goroutine。这个goroutine是Go运行时系统在启动之初创建的，用于执行一些运行时任务。字段<code>mstartfn</code>表示M的起始函数，这个函数其实就是我们在编写go语句时携带的那个函数。字段<code>curg</code>会存放当前M正在运行的那个G的指针，而字段<code>p</code>的值则会指向与当前M相关联的那个P。<code>mstartfn</code>、<code>curg</code>和<code>p</code>最能体现当前M的即时情况。此外，字段<code>nextp</code>用于暂存与当前M有潜在关联的P。让调度器将某个P赋给某个M的操作由<code>nextp</code>字段控制，称为对M和P的预联。运行时系统有时候会把刚刚重新启用的M和已与它预联的那个P关联在一起，这也是nextp字段的主要作用。字段<code>spinning</code>是<code>bool</code>类型的，它用于表示这个M是否正在寻找可运行的G。在寻找过程中，M会处于自旋状态。这也是该字段名的由来。Go运行时系统可以把一个M和一个G锁定在一起。一旦锁定，这个M就只能运行这个G，这个G也只能由该M运行。标准库代码包runtime中的函数<code>LockOSThread</code>和<code>UnlockOSThread</code>，也为我们提供了锁定和解锁的具体方法。M的字段<code>lockedg</code>表示的就是与当前M锁定的那个G（如果有的话）。</p><p>M在创建之初，会被加入全局的M列表（<code>runtime.allm</code>）中。这时，它的起始函数和预联的P也会被设置。最后，运行时系统会为这个M专门创建一个新的内核线程并与之相关联。如此一来，这个M就为执行G做好了准备。其中，起始函数仅当运行时系统要用此M执行系统监控或垃圾回收等任务的时候才会被设置。而这里的全局M列表其实并没有什么特殊的意义。运行时系统在需要的时候，会通过它获取到所有M的信息。同时，它也可以防止M被当作垃圾回收掉。</p><p>在新M被创建之后，Go运行时系统会先对它进行一番初始化，其中包括对自身所持的栈空间以及信号处理方面的初始化。在这些初始化工作都完成之后，该M的起始函数会被执行（如果存在的话）。注意，如果这个起始函数代表的是系统监控任务的话，那么该M会一直执行它，而不会继续后面的流程。否则，在起始函数执行完毕之后，当前M将会与那个预联的P完成关联，并准备执行其他任务。M会依次在多处寻找可运行的G并运行它。这一过程也是调度的一部分。有了M，Go程序的并发运行基础才得以形成。</p><p>运行时系统管辖的M（或者说<code>runtime.allm</code>中的M）有时候也会被停止，比如在运行时系统执行垃圾回收任务的过程中。运行时系统在停止M的时候，会把它放入调度器的空闲M列表（<code>runtime.sched.midle</code>）。这很重要，因为在需要一个未被使用的M时，运行时系统会先尝试从该列表中获取。M是否空闲，仅以它是否存在于调度器的空闲M列表中为依据。</p><p>单个Go程序所使用的M的最大数量是可以设置的。Go程序运行的时候会先启动一个引导程序，这个引导程序会为其运行建立必要的环境。在初始化调度器的时候，它会对M的最大数量进行初始设置，这个初始值是10 000。也就是说，一个Go程序最多可以使用10 000个M。这就意味着，最多可以有10 000个内核线程服务于当前的Go程序。请注意，这里说的是最理想的情况；由于操作系统内核对进程的虚拟内存的布局控制以及大小限制，如此量级的线程可能很难共存。从这个角度看，Go本身对于线程数量的限制几乎可以忽略。</p><p>除了上述初始设置之外，我们也可以在Go程序中对该限制进行设置。为了达到此目的，你需要调用标准库代码包runtime/debug中的<code>SetMaxThreads</code>函数，并提供新的M最大数量。<code>runtime/debug.SetMaxThreads</code>函数在执行完成后，会把旧的M最大数量作为结果值返回。非常重要的一点是，如果你在调用<code>runtime/debug.SetMaxThreads</code>函数时给定的新值比当时M的实际数量还要小，运行时系统就会立即引发一个运行时恐慌。所以，你要非常谨慎地使用这个函数。请记住，如果真的需要设置M的最大数量，那么越早调用<code>runtime/debug.SetMaxThreads</code>函数越好。对于它的设定值，你也要仔细斟酌。</p><h3 id="P（执行一个Go代码片段所必需的资源）"><a href="#P（执行一个Go代码片段所必需的资源）" class="headerlink" title="P（执行一个Go代码片段所必需的资源）"></a>P（执行一个Go代码片段所必需的资源）</h3><p>P是G能够在M中运行的关键。Go的运行时系统会适时地让P与不同的M建立或断开关联，以使P中的那些可运行的G能够及时获得运行时机，这与操作系统内核在CPU之上实时地切换不同的进程或线程的情形类似。</p><p>改变单个Go程序间接拥有的P的最大数量有两种方法。第一种方法，调用函数<code>runtime.GOMAXPROCS</code>并把想要设定的数量作为参数传入。第二种方法，在Go程序运行前设置环境变量<code>GOMAXPROCS</code>的值。P的最大数量实际上是对程序中并发运行的G的规模的一种限制。P的数量即为可运行G的队列的数量。一个G在被启用后，会先被追加到某个P的可运行G队列中，以等待运行时机。一个P只有与一个M关联在一起时，才会使其可运行G队列中的G有机会运行。不过，设置P的最大数量只能限制住P的数量，而对G和M的数量没有任何约束。当M因系统调用而阻塞（更确切地说，是它运行的G进入了系统调用）的时候，运行时系统会把该M和与之关联的P分离开来。这时，如果这个P的可运行G队列中还有未被运行的G，那么运行时系统就会找到一个空闲M，或创建一个新的M，并与该P关联以满足这些G的运行需要。因此，M的数量在很多时候也都会比P多。而G的数量，一般取决于Go程序本身。</p><p>在Go程序启动之初，引导程序会在初始化调度器时，对P的最大数量进行设置。这里的默认值会与当前CPU的总核心数相同。一旦发现环境变量<code>GOMAXPROCS</code>的值大于0，引导程序就会认为我们想要对P的最大数量进行设置。它会先检查一下此值的有效性：</p><p>如果不大于预设的硬性上限值（256），就认为是有效的，否则就会被这个硬性上限值取代。也就是说，最终的P的最大数量值绝不会比硬性上限值大。硬性上限值是256的原因是，Go目前还不能保证在256多个P同时存在的情形下仍然保持高效。不过，这个硬性上限值并不是永久的，它可能会在未来改变。</p><p>注意，虽然Go并未对何时调用<code>runtime.GOMAXPROCS</code>函数作限制，但是该函数调用的执行会暂时让所有的P都脱离运行状态，并试图阻止任何用户级别的G的运行。只有在新的P最大数量设定完成之后，运行时系统才开始陆续恢复它们。这对于程序的性能是非常大的损耗。所以，你最好只在Go程序的<code>main</code>函数的最前面调用<code>runtime.GOMAXPROCS</code>函数。当然，不在程序中改变P的最大数量最好不过，实际上在大多数情况下也无需改变。</p><p>确定P的最大数量之后，运行时系统会根据这个数值重整全局的P列表（<code>runtime. allp</code>）。与全局M列表类似，该列表中包含了当前运行时系统创建的所有P。运行时系统会把这些P中的可运行G全部取出，并放入调度器的可运行G队列中。这是调整全局P列表的一个重要前提。被转移的那些G，会在以后经由调度再次放入某个P的可运行G队列。</p><p>与空闲M列表类似，运行时系统中也存在一个调度器的空闲P列表（<code>runtime.sched.pidle</code>）。当一个P不再与任何M关联的时候，运行时系统就会把它放入该列表；而当运行时系统需要一个空闲的P关联某个M的话，会从此列表中取出一个。注意，P进入空闲P列表的一个前提条件是它的可运行G列表必须为空。例如，在重整全局P列表的时候，P在被清空可运行G队列之后，才会被放入空闲P列表。</p><p>与M不同，P本身是有状态的，可能具有的状态如下。</p><ul><li><p>Pidle 此状态表明当前P未与任何M存在关联。</p></li><li><p>Prunning 此状态表明当前P正在与某个M关联。</p></li><li><p>Psyscall 此状态表明当前P中的运行的那个G正在进行系统调用。</p></li><li><p>Pgcstop 此状态表明运行时系统需要停止调度。例如，运行时系统在开始垃圾回收的某些步骤前，就会试图把全局P列表中的所有P都置于此状态。</p></li><li><p>Pdead 此状态表明当前P已经不会再被使用。如果在Go程序运行的过程中，通过调用<code>runtime.GOMAXPROCS</code>函数减少了P的最大数量，那么多余的P就会被运行时系统置于此状态。</p></li></ul><p>P在创建之初的状态是<code>Pgcstop</code>，虽然这并不意味着运行时系统要在这时进行垃圾回收。不过，P处于这一初始状态的时间会非常短暂。在紧接着的初始化之后，运行时系统会将其状态设置为Pidle，并放入调度器的空闲P列表。图2-4描绘了P在各个状态之间进行流转的具体情况。</p><p><img src="\images\2-4.png" alt="图2-4"></p><h5 id="图2-4-P的状态转换"><a href="#图2-4-P的状态转换" class="headerlink" title="图2-4　P的状态转换"></a>图2-4　P的状态转换</h5><p>可以看到，非<code>Pdead</code>状态的P都会在运行时系统欲停止调度时被置于Pgcstop状态。不过，等到需要重启调度的时候（如垃圾回收结束后），它们并不会被恢复至原有状态，而会被统一地转换为<code>Pidle</code>状态。也就是说，它们会被放到同一起跑线上，并公平地接受再次调度。另一方面，非<code>Pgcstop</code>状态的P都可能因全局P列表的缩小而被认为是多余的，并被置于<code>Pdead</code>状态。不过，我们并不用担心其中的G会失去归宿。因为，在P被转换为<code>Pdead</code>状态之前，其可运行G队列中的G都会被转移到调度器的可运行G队列，而它的自由G列表中的G也都会被转移到调度器的自由G列表中。</p><p>正如前面所述，每个P中除了一个可运行G队列外，还都包含一个自由G列表。这个列表中包含了一些已经运行完成的G。随着运行完成的G的增多，该列表可能会很长。如果它增长到一定程度，运行时系统就会把其中的部分G转移到调度器的自由G列表中。另一方面，当使用<code>go</code>语句启用一个G的时候，运行时系统会先试图从相应P的自由G列表中获取一个现成的G，来封装这个<code>go</code>语句携带的函数（也称<code>go</code>函数），仅当获取不到这样一个G的时候才有可能创建一个新的G。考虑到相应P的自由G列表为空而获取不到自由G的情况，运行时系统会在发现其中的自由G太少时，预先尝试从调度器的自由G列表中转移过来一些G。如此一来，只有在调度器的自由G列表也弹尽粮绝的时候，才会有新的G被创建。这在很大程度上提高了G的复用率。</p><p>在P的结构中，可运行G队列和自由G列表是最重要的两个成员。至少对于Go语言的使用者来说是这样。它们间接地体现了运行时系统对G的调度情况。下面就对Go并发模型中的G进行介绍。</p><h3 id="G（Go代码片段）"><a href="#G（Go代码片段）" class="headerlink" title="G（Go代码片段）"></a>G（Go代码片段）</h3><p>一个G就代表一个<code>goroutine</code>（或称Go例程），也与go函数相对应。作为编程人员，我们只是使用go语句向Go的运行时系统提交了一个并发任务，而Go的运行时系统则会按照我们的要求并发地执行它。</p><p>Go的编译器会把go语句变成对内部函数<code>newproc</code>的调用，并把go函数及其参数都作为参数传递给这个函数。这也是你应该了解的第一件与go语句有关的事。其实它并不神秘，只是一种递送并发任务的方法而已。</p><p>运行时系统在接到这样一个调用之后，会先检查go函数及其参数的合法性，然后试图从本地P的自由G列表和调度器的自由G列表获取可用的G，如果没有获取到，就新建一个G。与M和P相同，运行时系统也持有一个G的全局列表（<code>runtime.allgs</code>）。新建的G会在第一时间被加入该列表。类似地，这个全局列表的主要作用是：集中存放当前运行时系统中的所有G的指针。无论用于封装当前这个go函数的G是否是新创建的，运行时系统都会对它进行一次初始化，包括关联go函数以及设置该G的状态和ID等步骤。在初始化完成后，这个G会立即被存储到本地P的<code>runnext</code>字段中；该字段用于存放新鲜出炉的G，以求更早地运行它。如果这时runnext字段已存有一个G，那么这个已有的G就会被“踢到”该P的可运行G队列的末尾。如果该队列已满，那么这个G就只能追加到调度器的可运行G队列中了。</p><p>在特定情况下，一旦新启用的G被存于某地，调度就会立即进行以使该G尽早被运行。不过，即使这里不立即调度，我们也无需担心，因为运行时系统总是在为及时运行每个G忙碌着。</p><p>每一个G都会由运行时系统根据其实际状况设置不同的状态，其主要状态如下。</p><ul><li><p>Gidle 表示当前G刚被新分配，但还未初始化。</p></li><li><p>Grunnable 表示当前G正在可运行队列中等待运行。</p></li><li><p>Grunning 表示当前G正在运行。</p></li><li><p>Gsyscall 表示当前G正在执行某个系统调用。</p></li><li><p>Gwaiting 表示当前G正在阻塞。</p></li><li><p>Gdead 表示当前G正在闲置。</p></li><li><p>Gcopystack 表示当前G的栈正被移动，移动的原因可能是栈的扩展或收缩。</p></li></ul><p>除了上述状态，还有一个称为<code>Gscan</code>的状态。不过这个状态并不能独立存在，而是组合状态的一部分。比如，<code>Gscan</code>与<code>Grunnable</code>组合成<code>Gscanrunnable</code>状态，代表当前G正等待运行，同时它的栈正被扫描，扫描的原因一般是GC（垃圾回收）任务的执行。又比如，<code>Gscan</code>与<code>Grunning</code>组合成<code>Gscanrunning</code>状态，表示正处于<code>Grunning</code>状态的当前G的栈要被GC扫描时的一个短暂时刻。简单起见，我不会在下面对这些组合状态进行说明。你只要知道这些组合状态会在<code>GC</code>扫描发生时出现就可以了。</p><p>之前讲过，在运行时系统想用一个G封装go函数的时候，会先对这个G进行初始化。一旦该G准备就绪，其状态就会被设置成<code>Grunnable</code>。也就是说，一个G真正开始被使用是在其状态设置为<code>Grunnable</code>之后。图2-5展示了G在其生命周期内的状态流转情况。</p><p><img src="\images\2-5.png" alt="图2-5"></p><h5 id="图2-5-G-的状态转换"><a href="#图2-5-G-的状态转换" class="headerlink" title="图2-5　G 的状态转换"></a>图2-5　G 的状态转换</h5><p>一个G在运行的过程中，是否会等待某个事件以及会等待什么样的事件，完全由其封装的go函数决定。例如，如果这个函数中包含对通道值的操作，那么在执行到对应代码的时候，这个G就有可能进入<code>Gwaiting</code>状态。这可能是在等待从通道类型值中接收值，也可能是在等待向通道类型值发送值。又例如，涉及网络I/O的时候也会导致相应的G进入Gwaiting状态。此外，操纵定时器（<code>time.Timer</code>）和调用<code>time.Sleep</code>函数同样会造成相应G的等待。在事件到来之后，G会被“唤醒”并被转换至<code>Grunnable</code>状态。待时机到来时，它会被再次运行。</p><p>G在退出系统调用时的状态转换要比上述情况复杂一些。运行时系统会先尝试直接运行这个G，仅当无法直接运行的时候，才会把它转换为<code>Grunnable</code>状态并放入调度器的自由G列表中。显然，对这样一个G来说，在其退出系统调用之时就立即被恢复运行再好不过了。运行时系统当然会为此做出一些努力，不过即使努力失败了，该G也还是会在实时的调度过程中被发现并运行。</p><p>最后，值得一提的是，进入死亡状态（<code>Gdead</code>）的G是可以重新初始化并使用的。相比之下，P在进入死亡状态（<code>Pdead</code>）之后，就只能面临销毁的结局。由此也可以说明<code>Gdead</code>状态与<code>Pdead</code>状态所表达的含义截然不同。处于<code>Gdead</code>状态的G会被放入本地P或调度器的自由G列表，这是它们被重用的前提条件。</p><blockquote><p>本文转载于<a href="http://www.ituring.com.cn/book/tupubarticle/16048" target="_blank" rel="noopener">郝林的文章</a></p></blockquote>]]></content>
      
      <categories>
          
          <category> golang </category>
          
          <category> 并发 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>与运算的妙用</title>
      <link href="/2018/03/19/%E4%B8%8E%E8%BF%90%E7%AE%97/"/>
      <url>/2018/03/19/%E4%B8%8E%E8%BF%90%E7%AE%97/</url>
      <content type="html"><![CDATA[<p>发现了一个有意思的表达式：x&amp;(x-1)，分享给大家！<br><a id="more"></a></p><h3 id="1、计算输入值转化为二进制后有多少个1"><a href="#1、计算输入值转化为二进制后有多少个1" class="headerlink" title="1、计算输入值转化为二进制后有多少个1"></a>1、计算输入值转化为二进制后有多少个1</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">count_one</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">int</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> count:=<span class="number">0</span>;;count++&#123;</span><br><span class="line">        <span class="keyword">if</span> x==<span class="number">0</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> count</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            x=x&amp;(x<span class="number">-1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、判断输入的i是否是2的n次方"><a href="#2、判断输入的i是否是2的n次方" class="headerlink" title="2、判断输入的i是否是2的n次方"></a>2、判断输入的i是否是2的n次方</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">index</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">int</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> x&amp;(x<span class="number">-1</span>)==<span class="number">0</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> golang </category>
          
          <category> 应用 </category>
          
      </categories>
      
      
    </entry>
    
  
  
</search>
